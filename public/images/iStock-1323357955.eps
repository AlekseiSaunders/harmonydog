%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Cartoon Shiba Inu dog meditating)
%%Creator: (Adobe Illustrator\(R\) 25.2)
%%For: (Irina Mir)
%%CreationDate: 25-04-21
%%BoundingBox: 0 0 600 600
%%HiResBoundingBox: 0 0 600 600
%%CropBox: 0 0 600 600
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.2.1 x236 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%Keywords: (dog, shiba inu, meditation, cute, cartoon, meditating, buddha, zen, illustration, mindfulness, kawaii, yoga, funny, drawing, buddhist, pose, position, character, doodle, fun, isolated, peaceful, lotus, posture, practice, relaxation, asana, r
%%+elax, art, lifestyle, spiritual, vector, calm, clip art, sketch, peace, relaxing, spirituality, wellness, smiling, buddhism, yogi, sitting, mindful, simple, enlightenment, tranquility, hand drawn, puppy, fox)
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%BeginPhotoshop: 800
% 3842494D04040000000003141C015A00031B25471C0100000200041C02050020
% 436172746F6F6E20536869626120496E7520646F67206D656469746174696E67
% 1C02190003646F671C02190009736869626120696E751C0219000A6D65646974
% 6174696F6E1C02190004637574651C02190007636172746F6F6E1C0219000A6D
% 656469746174696E671C021900066275646468611C021900037A656E1C021900
% 0C696C6C757374726174696F6E1C0219000B6D696E6466756C6E6573731C0219
% 00066B61776169691C02190004796F67611C0219000566756E6E791C02190007
% 64726177696E671C0219000862756464686973741C02190004706F73651C0219
% 0008706F736974696F6E1C021900096368617261637465721C02190006646F6F
% 646C651C0219000366756E1C0219000869736F6C617465641C02190008706561
% 636566756C1C021900056C6F7475731C02190007706F73747572651C02190008
% 70726163746963651C0219000A72656C61786174696F6E1C021900056173616E
% 611C0219000572656C61781C021900036172741C021900096C6966657374796C
% 651C0219000973706972697475616C1C02190006766563746F721C0219000463
% 616C6D1C02190008636C6970206172741C02190006736B657463681C02190005
% 70656163651C0219000872656C6178696E671C0219000C73706972697475616C
% 6974791C0219000877656C6C6E6573731C02190007736D696C696E671C021900
% 08627564646869736D1C02190004796F67691C0219000773697474696E671C02
% 1900076D696E6466756C1C0219000673696D706C651C0219000D656E6C696768
% 74656E6D656E741C0219000B7472616E7175696C6974791C0219000A68616E64
% 20647261776E1C0219000570757070791C02190003666F781C0278007C446F67
% 2073697474696E6720696E206D656469746174696F6E2C20636172746F6F6E20
% 64726177696E672E20437574652066756E6E7920536869626120496E75206D65
% 6469746174696E6720696E206C6F74757320706F736974696F6E2C2076656374
% 6F7220636C69702061727420696C6C757374726174696F6E2E1C020000020004
%EndPhotoshop
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c004 79.164570, 2020/11/18-15:51:46        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Cartoon Shiba Inu dog meditating</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Dog sitting in meditation, cartoon drawing. Cute funny Shiba Inu meditating in lotus position, vector clip art illustration.</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
      <rdf:li>dog</rdf:li>
      <rdf:li>shiba inu</rdf:li>
      <rdf:li>meditation</rdf:li>
      <rdf:li>cute</rdf:li>
      <rdf:li>cartoon</rdf:li>
      <rdf:li>meditating</rdf:li>
      <rdf:li>buddha</rdf:li>
      <rdf:li>zen</rdf:li>
      <rdf:li>illustration</rdf:li>
      <rdf:li>mindfulness</rdf:li>
      <rdf:li>kawaii</rdf:li>
      <rdf:li>yoga</rdf:li>
      <rdf:li>funny</rdf:li>
      <rdf:li>drawing</rdf:li>
      <rdf:li>buddhist</rdf:li>
      <rdf:li>pose</rdf:li>
      <rdf:li>position</rdf:li>
      <rdf:li>character</rdf:li>
      <rdf:li>doodle</rdf:li>
      <rdf:li>fun</rdf:li>
      <rdf:li>isolated</rdf:li>
      <rdf:li>peaceful</rdf:li>
      <rdf:li>lotus</rdf:li>
      <rdf:li>posture</rdf:li>
      <rdf:li>practice</rdf:li>
      <rdf:li>relaxation</rdf:li>
      <rdf:li>asana</rdf:li>
      <rdf:li>relax</rdf:li>
      <rdf:li>art</rdf:li>
      <rdf:li>lifestyle</rdf:li>
      <rdf:li>spiritual</rdf:li>
      <rdf:li>vector</rdf:li>
      <rdf:li>calm</rdf:li>
      <rdf:li>clip art</rdf:li>
      <rdf:li>sketch</rdf:li>
      <rdf:li>peace</rdf:li>
      <rdf:li>relaxing</rdf:li>
      <rdf:li>spirituality</rdf:li>
      <rdf:li>wellness</rdf:li>
      <rdf:li>smiling</rdf:li>
      <rdf:li>buddhism</rdf:li>
      <rdf:li>yogi</rdf:li>
      <rdf:li>sitting</rdf:li>
      <rdf:li>mindful</rdf:li>
      <rdf:li>simple</rdf:li>
      <rdf:li>enlightenment</rdf:li>
      <rdf:li>tranquility</rdf:li>
      <rdf:li>hand drawn</rdf:li>
      <rdf:li>puppy</rdf:li>
      <rdf:li>fox</rdf:li>
   </rdf:Bag>
         </dc:subject>
         <xmp:CreatorTool>Adobe Illustrator 25.1 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2021-02-18T22:29:39-03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-02-18T22:29:39-03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-02-18T22:29:39-03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWmZVUsxAUCpJ2AAxVQtdR0&#xA;+8LC0uobgoaP6UivQjx4k+ONpMSOaIxQ7FXYq7FXYq7FXYq7FUNdanp1o6JdXUNu8n2FlkVC1dtg&#xA;xFcbSIk8kSCCAQag7gjFDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir5J/NT&#xA;zn5h/M3z9P5W0W6aHy3pzvHRSRFIYjxluZQv2/i+GMHbp0qc1mv1scMDI8vvL0XZ+joD+cfsSeb8&#xA;lNYsAl3o2tf6fF8SEq1ueQ/kkR3IP+dc0eLt+N+qNDyN/qdrLR2Odsm8nf8AOQfnvyZqEei+fraX&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:13283ef0-c4d4-4bbd-8f26-dd58a0c86ad4</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:13283ef0-c4d4-4bbd-8f26-dd58a0c86ad4</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3475da6f-f821-6b47-9d03-3157c8745d3c</stRef:instanceID>
            <stRef:documentID>xmp.did:3eb636b9-3c86-4540-8758-407a64fdb135</stRef:documentID>
            <stRef:originalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:13283ef0-c4d4-4bbd-8f26-dd58a0c86ad4</stEvt:instanceID>
                  <stEvt:when>2021-02-18T22:29:39-03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.1 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Mobile</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=91 G=21 B=16</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>91</xmpG:red>
                           <xmpG:green>21</xmpG:green>
                           <xmpG:blue>15</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=99 G=8 B=8</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>98</xmpG:red>
                           <xmpG:green>8</xmpG:green>
                           <xmpG:blue>8</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=163 B=41</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>163</xmpG:green>
                           <xmpG:blue>40</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=229 G=182 B=181</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>228</xmpG:red>
                           <xmpG:green>182</xmpG:green>
                           <xmpG:blue>181</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 <?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -600 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 600 li
600 600 li
600 0 li
cp
clp
600 600 mo
0 600 li
0 0 li
600 0 li
600 600 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
461.101 440.198 mo
460.51 438.165 459.762 436.086 458.875 434.007 cv
467.48 408.311 463.137 373.774 438.091 356.862 cv
433.974 354.085 429.809 351.921 425.697 350.425 cv
420.777 329.188 409.38 308.111 391.8 287.736 cv
397.205 283.336 402.143 278.341 406.496 272.869 cv
419.659 256.32 425.441 233.208 423.219 206.03 cv
421.826 188.97 417.781 175.504 416.37 171.211 cv
420.573 132.369 416.185 87.6957 399.63 77.1592 cv
391.424 71.9423 378.929 73.8447 364.443 82.5161 cv
352.925 89.4125 341.183 99.9819 332.067 111.636 cv
310.898 106.177 289.085 106.187 267.19 111.664 cv
258.07 99.9965 246.319 89.4175 234.791 82.5161 cv
220.303 73.8447 207.809 71.9423 199.605 77.1601 cv
183.051 87.6957 178.662 132.368 182.866 171.211 cv
181.455 175.503 177.411 188.966 176.017 206.03 cv
173.795 233.209 179.578 256.321 192.74 272.869 cv
196.505 277.602 200.684 281.968 205.184 285.871 cv
161.129 335.721 165.908 376.604 168.451 388.031 cv
169.779 393.995 171.909 399.14 174.67 403.092 cv
164.49 406.341 155.672 411.864 149.041 419.17 cv
138.105 431.221 133.383 447.715 135.748 465.614 cv
138.389 485.616 149.818 501.038 168.801 510.208 cv
186.247 518.634 205.128 519.543 212.436 519.543 cv
229.645 519.543 242.366 519.015 246.335 518.826 cv
246.687 518.936 li
247.162 519.077 247.635 519.224 248.109 519.372 cv
249.32 519.75 250.573 520.141 251.793 520.408 cv
254.983 521.238 258.381 521.934 262.184 522.531 cv
269.667 523.697 277.483 524.274 286.077 524.274 cv
291.572 524.274 297.386 524.038 303.633 523.568 cv
316.258 522.563 329.321 520.562 342.468 517.622 cv
342.719 517.706 342.965 517.767 343.212 517.807 cv
349.409 518.828 355.814 519.431 363.985 519.763 cv
370.71 520.028 377.64 520.001 384.579 519.677 cv
397.17 519.063 411.911 517.721 425.771 512.432 cv
433.103 509.627 439.477 505.914 444.701 501.411 cv
450.297 496.713 454.888 490.478 457.968 483.409 cv
459.128 480.85 li
459.356 480.257 459.542 479.654 459.728 479.049 cv
460.008 478.147 li
460.175 477.582 460.354 477.019 460.534 476.457 cv
460.898 475.306 461.278 474.115 461.579 472.79 cv
461.731 471.901 461.901 471.014 462.07 470.126 cv
462.569 467.509 463.084 464.803 463.166 462.109 cv
463.809 454.23 463.111 446.858 461.101 440.198 cv
.388235 .031373 .031373 rgb
f
354.271 425.016 mo
376.853 439.068 414.718 421.643 405.475 389.321 cv
400.509 371.955 379.692 373.675 379.692 373.675 cv
379.692 373.675 400.052 337.833 435.003 361.434 cv
483.444 394.145 452.026 506.922 359.322 462.701 cv
292.016 430.597 337.821 414.778 354.271 425.016 cv
1 .639216 .160784 rgb
f
435.003 361.434 mo
427.141 356.125 420.023 353.842 413.703 353.464 cv
417.34 356.813 414.132 364.247 418.778 367.075 cv
430.453 374.182 433.643 385.197 436.037 393.979 cv
441.532 413.211 435.022 433.064 422.84 448.801 cv
418.066 454.965 425.41 462.233 420.561 468.867 cv
463.153 451.923 470.385 385.326 435.003 361.434 cv
1 1 1 rgb
f
437.439 415.98 mo
437.104 415.757 436.771 415.537 436.443 415.318 cv
433.246 413.184 429.918 411.253 426.458 409.572 cv
425.63 409.17 416.633 405.272 415.855 405.272 cv
415.825 405.272 415.807 405.278 415.803 405.29 cv
416.3 403.875 416.755 402.445 417.167 401.003 cv
418.295 397.053 419.101 393.01 419.571 388.93 cv
419.629 388.427 419.681 387.934 419.733 387.447 cv
420.642 385.251 421.434 383.28 421.824 381.796 cv
422.74 378.317 422.989 374.205 422.851 369.975 cv
431.254 376.958 433.948 386.318 436.037 393.979 cv
438.132 401.309 438.482 408.731 437.439 415.98 cv
.937255 .529412 .129412 rgb
f
449.405 433.638 mo
449.23 433.264 449.055 432.89 448.881 432.516 cv
448.876 432.508 448.871 432.501 448.865 432.494 cv
448.051 430.744 447.271 428.985 446.704 427.117 cv
446.122 425.2 445.62 423.337 444.363 421.73 cv
442.539 419.398 439.922 417.628 437.439 415.98 cv
438.482 408.731 438.132 401.309 436.037 393.979 cv
433.948 386.318 431.254 376.958 422.851 369.975 cv
422.727 366.205 422.295 362.341 421.75 358.748 cv
425.422 359.983 429.167 361.886 432.967 364.451 cv
450.861 376.534 460.457 405.904 449.405 433.638 cv
.937255 .827451 .807843 rgb
f
399 476.506 mo
386.246 476.506 372.44 472.99 357.755 465.986 cv
355.941 465.12 355.174 462.95 356.038 461.135 cv
356.904 459.319 359.074 458.557 360.89 459.417 cv
397.563 476.913 429.085 470.524 445.205 442.337 cv
462.388 412.292 452.748 377.809 432.967 364.451 cv
423.415 358.003 414.216 355.743 405.637 357.735 cv
396.882 359.768 390.372 365.85 386.601 370.329 cv
395.049 371.565 405.506 376.197 408.974 388.319 cv
413.175 403.013 408.864 416.511 397.146 425.351 cv
384.042 435.233 365.621 436.365 352.348 428.103 cv
350.642 427.043 350.119 424.797 351.182 423.092 cv
352.244 421.386 354.483 420.863 356.193 421.926 cv
366.799 428.525 382.181 427.525 392.763 419.54 cv
401.947 412.611 405.305 401.962 401.977 390.321 cv
397.878 375.987 380.176 377.288 379.993 377.302 cv
378.66 377.407 377.354 376.77 376.626 375.634 cv
375.899 374.497 375.863 373.051 376.529 371.877 cv
376.926 371.182 386.426 354.762 403.924 350.661 cv
414.586 348.166 425.722 350.778 437.039 358.419 cv
464.893 377.224 467.015 418.861 451.522 445.95 cv
443.35 460.241 431.123 470.011 416.165 474.202 cv
410.684 475.739 404.957 476.506 399 476.506 cv
.388235 .031373 .031373 rgb
f
417.167 401.003 mo
418.295 397.053 419.101 393.01 419.571 388.93 cv
419.84 386.605 419.969 384.487 420.629 382.268 cv
421.094 380.705 420.888 378.95 420.926 377.344 cv
420.996 374.386 421.117 371.43 421.152 368.471 cv
421.221 362.666 421.038 356.72 419.337 351.126 cv
414.581 335.481 412.482 323.525 403.499 309.748 cv
384.491 280.597 371.719 272.259 371.063 265.046 cv
215.324 261.885 li
214.668 270.409 214.857 282.958 201.555 301.88 cv
196.98 308.388 192.612 315.067 188.996 322.163 cv
186.805 326.463 184.415 331.061 183.406 335.804 cv
182.801 338.648 180.581 341.29 179.429 343.995 cv
176.754 350.274 175.44 357.088 175.153 363.891 cv
174.74 373.703 176.385 383.493 178.62 393.058 cv
179.59 397.215 180.851 400.949 183.735 404.16 cv
171.313 404.83 159.704 411.142 151.649 420.565 cv
147.927 424.921 144.921 429.905 142.887 435.265 cv
141.335 439.353 140.274 443.616 139.654 447.941 cv
139.499 449.019 139.366 449.975 139.562 451.039 cv
139.821 452.451 139.944 453.745 139.995 455.189 cv
140.102 458.267 140.468 461.334 141.074 464.352 cv
142.287 470.399 144.457 476.245 147.415 481.652 cv
153.327 492.461 162.433 501.6 173.495 507.101 cv
175.042 507.87 176.626 508.567 178.239 509.186 cv
185.541 511.99 193.306 513.317 201.065 514.04 cv
204.968 514.403 208.918 514.406 212.81 514.841 cv
215.308 515.12 217.562 515.941 220.09 515.394 cv
224.158 514.514 228.171 512.789 232.118 511.473 cv
233.139 511.133 234.182 510.788 235.258 510.789 cv
236.874 510.789 238.375 511.56 239.843 512.238 cv
255.739 519.583 290.907 520.148 307.993 516.313 cv
325.079 512.477 338.478 509.239 355.962 510.221 cv
378.095 511.463 393.193 515.119 414.972 510.982 cv
426.432 508.806 430.318 505.404 438.977 497.587 cv
444.974 492.172 450.411 485.907 453.542 478.459 cv
459.359 464.62 456.266 448.999 450.37 435.742 cv
449.093 432.871 447.62 430.136 446.704 427.117 cv
446.122 425.2 445.62 423.337 444.363 421.73 cv
442.293 419.083 439.202 417.161 436.443 415.318 cv
433.246 413.184 429.918 411.253 426.458 409.572 cv
425.598 409.154 415.918 404.962 415.803 405.29 cv
416.3 403.875 416.755 402.445 417.167 401.003 cv
1 .639216 .160784 rgb
f
303.044 446.643 mo
296.638 443.731 275.773 447.069 268.766 447.266 cv
252.105 447.73 236.304 456.975 233.535 474.975 cv
230.91 490.727 236.198 504.705 246.418 514.614 cv
252.947 516.484 262.791 518.234 272.263 519.166 cv
274.98 519.433 284.144 519.29 291.611 519.147 cv
296.152 519.059 300.066 518.972 301.521 518.977 cv
290.861 501.465 292.384 464.917 303.044 446.643 cv
1 1 1 rgb
f
247.842 388.775 mo
285.485 412.743 353.547 410.077 358.273 360.854 cv
361.658 349.655 357.263 335.945 352.08 326.016 cv
333.629 290.661 271.03 297.206 251.877 313.249 cv
229.242 332.209 228.056 368.914 247.842 388.775 cv
f
333.75 425.801 mo
309.102 448.293 295.396 455.907 273.061 436.11 cv
273.061 436.11 282.706 420.882 280.168 400.577 cv
294.719 405.52 307.381 404.526 321.459 400.08 cv
331.994 406.958 338.69 417.154 333.75 425.801 cv
f
180.567 399.209 mo
176.817 393.114 175.038 384.148 174.619 380.273 cv
174.287 377.201 173.935 359.174 174.017 356.089 cv
174.37 358.4 174.72 360.798 175.184 363.243 cv
175.173 363.458 175.162 363.675 175.153 363.891 cv
174.74 373.703 176.385 383.493 178.62 393.058 cv
179.126 395.228 179.712 397.283 180.567 399.209 cv
.364706 .027451 .0235294 rgb
f
419.733 387.447 mo
419.92 385.685 420.112 384.007 420.629 382.268 cv
421.094 380.705 420.888 378.95 420.926 377.344 cv
420.995 374.447 421.112 371.551 421.15 368.653 cv
421.742 369.083 422.308 369.524 422.851 369.975 cv
422.989 374.205 422.74 378.317 421.824 381.796 cv
421.434 383.28 420.642 385.251 419.733 387.447 cv
.878431 .439216 .105882 rgb
f
422.851 369.975 mo
422.308 369.524 421.742 369.083 421.15 368.653 cv
421.151 368.593 421.152 368.531 421.152 368.471 cv
421.192 365.142 421.148 361.766 420.783 358.437 cv
421.105 358.536 421.427 358.639 421.75 358.748 cv
422.295 362.341 422.727 366.205 422.851 369.975 cv
.878431 .686274 .65098 rgb
f
420.312 350.757 mo
419.924 350.665 419.535 350.579 419.147 350.5 cv
418.85 349.512 418.563 348.541 418.283 347.581 cv
418.349 345.809 418.462 344.483 418.778 343.726 cv
419.067 345.087 419.662 347.588 420.312 350.757 cv
.364706 .027451 .0235294 rgb
f
421.75 358.748 mo
421.427 358.639 421.105 358.536 420.783 358.437 cv
420.512 355.961 420.062 353.512 419.337 351.126 cv
419.273 350.917 419.21 350.708 419.147 350.5 cv
419.535 350.579 419.924 350.665 420.312 350.757 cv
420.796 353.115 421.31 355.842 421.75 358.748 cv
f
273.9 436.845 mo
252.845 425.406 231.555 405.746 183.756 403.115 cv
182.564 402.075 181.503 400.731 180.567 399.209 cv
179.712 397.283 179.126 395.228 178.62 393.058 cv
176.385 383.493 174.74 373.703 175.153 363.891 cv
175.162 363.675 175.173 363.458 175.184 363.243 cv
177.824 377.159 184.146 392.595 215.513 402.243 cv
237.336 408.955 253.924 421.448 255.836 422.404 cv
261.694 425.97 268.625 428.609 275.946 430.3 cv
274.398 433.999 273.061 436.11 273.061 436.11 cv
273.342 436.359 273.622 436.604 273.9 436.845 cv
330.088 429.101 mo
331.282 428.04 332.503 426.939 333.75 425.801 cv
334.518 424.456 335.005 423.074 335.24 421.672 cv
338.288 421.419 341.698 421.383 343.176 420.872 cv
358.246 415.664 373.25 408.753 387.343 401.661 cv
419.237 385.609 417.882 358.356 418.283 347.581 cv
418.563 348.541 418.85 349.512 419.147 350.5 cv
419.21 350.708 419.273 350.917 419.337 351.126 cv
420.062 353.512 420.512 355.961 420.783 358.437 cv
421.148 361.766 421.192 365.142 421.152 368.471 cv
421.152 368.531 421.151 368.593 421.15 368.653 cv
421.112 371.551 420.995 374.447 420.926 377.344 cv
420.888 378.95 421.094 380.705 420.629 382.268 cv
420.112 384.007 419.92 385.685 419.733 387.447 cv
417.357 393.186 414.174 400.466 415.226 404.639 cv
383.384 405.859 356.244 416.86 330.088 429.101 cv
.937255 .529412 .129412 rgb
f
296.953 444.739 mo
288.553 443.821 281.242 440.833 273.9 436.845 cv
273.622 436.604 273.342 436.359 273.061 436.11 cv
273.061 436.11 274.398 433.999 275.946 430.3 cv
282.4 431.79 289.154 432.544 295.736 432.543 cv
309.225 432.543 321.99 429.378 329.947 422.912 cv
330.851 422.178 332.942 421.863 335.24 421.672 cv
335.005 423.074 334.518 424.456 333.75 425.801 cv
332.503 426.939 331.282 428.04 330.088 429.101 cv
318.96 434.308 308.012 439.74 296.953 444.739 cv
.937255 .827451 .807843 rgb
f
208.081 291.177 mo
208.081 291.177 li
208.083 291.173 208.086 291.168 208.088 291.163 cv
208.086 291.168 208.084 291.173 208.081 291.178 cv
389.741 290.503 mo
389.158 289.759 388.585 289.038 388.025 288.339 cv
388.098 288.284 388.171 288.228 388.244 288.173 cv
388.702 288.896 389.2 289.67 389.741 290.503 cv
.364706 .027451 .0235294 rgb
f
349.068 321.127 mo
345.471 316.131 340.858 312.159 335.59 309.082 cv
353.336 306.422 371.881 300.565 388.025 288.339 cv
388.585 289.038 389.158 289.759 389.741 290.503 cv
390.15 291.131 390.582 291.793 391.041 292.49 cv
390.103 293.667 389.158 294.868 388.211 296.131 cv
377.647 307.104 364.102 315.455 349.068 321.127 cv
245.571 319.627 mo
230.62 313.178 217.567 303.716 208.081 291.177 cv
208.084 291.173 208.086 291.168 208.088 291.163 cv
208.771 289.959 209.415 288.701 210.016 287.422 cv
225.195 299.311 242.594 305.41 259.506 308.417 cv
256.529 309.889 253.948 311.514 251.877 313.249 cv
249.548 315.2 247.446 317.338 245.571 319.627 cv
.937255 .529412 .129412 rgb
f
298.698 330.064 mo
280.18 330.063 261.758 326.611 245.571 319.627 cv
247.446 317.338 249.548 315.2 251.877 313.249 cv
253.948 311.514 256.529 309.889 259.506 308.417 cv
271.306 310.515 282.868 311.107 293.266 311.107 cv
295.437 311.107 297.558 311.081 299.618 311.039 cv
301.622 311.079 303.682 311.103 305.791 311.103 cv
315.016 311.103 325.166 310.644 335.59 309.082 cv
340.858 312.159 345.471 316.131 349.068 321.127 cv
333.331 327.064 315.971 330.065 298.698 330.064 cv
.937255 .827451 .807843 rgb
f
208.658 515.176 mo
175.852 515.174 146.096 500.231 141.271 465.294 cv
142.514 471.006 144.611 476.526 147.415 481.652 cv
153.327 492.461 162.433 501.6 173.495 507.101 cv
175.042 507.87 176.626 508.567 178.239 509.186 cv
185.541 511.99 193.306 513.317 201.065 514.04 cv
204.968 514.403 208.918 514.406 212.81 514.841 cv
213.268 514.892 213.718 514.962 214.163 515.037 cv
212.321 515.129 210.486 515.176 208.658 515.176 cv
225.045 513.979 mo
227.424 513.173 229.783 512.251 232.118 511.473 cv
233.033 511.168 233.965 510.86 234.923 510.799 cv
234.922 510.813 li
235.034 510.807 235.145 510.789 235.258 510.789 cv
236.193 510.789 237.089 511.047 237.963 511.396 cv
233.7 512.489 229.376 513.354 225.045 513.979 cv
.364706 .027451 .0235294 rgb
f
214.163 515.037 mo
213.718 514.962 213.268 514.892 212.81 514.841 cv
208.918 514.406 204.968 514.403 201.065 514.04 cv
193.306 513.317 185.541 511.99 178.239 509.186 cv
176.626 508.567 175.042 507.87 173.495 507.101 cv
162.433 501.6 153.327 492.461 147.415 481.652 cv
144.611 476.526 142.514 471.006 141.271 465.294 cv
141.252 465.16 141.234 465.026 141.216 464.892 cv
140.398 458.697 141.993 435.335 151.32 429.054 cv
147.767 453.419 177.969 476.261 232.486 487.886 cv
233.158 493.256 233.726 498.902 235.295 504.012 cv
234.923 510.799 li
233.965 510.86 233.033 511.168 232.118 511.473 cv
229.783 512.251 227.424 513.173 225.045 513.979 cv
221.414 514.502 217.779 514.857 214.163 515.037 cv
.937255 .529412 .129412 rgb
f
299.618 307.397 mo
328.396 308.01 373.605 305.356 402.18 269.435 cv
432.195 231.7 410.752 171.824 410.752 171.824 cv
415.242 132.227 410.14 90.3867 396.669 81.8145 cv
383.198 73.2422 352.582 92.836 334.214 117.94 cv
311.647 111.422 288.586 111.396 265.022 117.94 cv
246.653 92.836 216.038 73.2422 202.567 81.8145 cv
189.096 90.3867 183.994 132.227 188.484 171.824 cv
188.484 171.824 167.04 231.7 197.057 269.435 cv
225.631 305.356 270.839 308.01 299.618 307.397 cv
1 .639216 .160784 rgb
f
366.383 236.307 mo
352.66 244.874 331.907 242.561 324.3 234.735 cv
309.223 219.226 307.578 234.919 307.578 234.919 cv
291.658 234.919 li
291.658 234.919 289.848 219.226 274.936 234.735 cv
267.353 242.623 250.016 246.532 232.853 236.307 cv
222.319 230.031 191.952 217.113 180.83 230.576 cv
181.748 248.599 201.649 310.153 299.618 307.104 cv
397.587 310.153 417.487 248.599 418.405 230.576 cv
411.048 218.661 384.726 224.854 366.383 236.307 cv
1 1 1 rgb
f
293.352 303.828 mo
264.068 303.828 225.216 298.988 199.904 267.168 cv
194.005 259.752 190.238 251.384 187.931 242.907 cv
201.146 268.531 236.485 293.878 293.217 293.874 cv
295.416 293.874 297.661 293.836 299.924 293.758 cv
302.098 293.833 304.234 293.869 306.348 293.869 cv
364.054 293.869 399.126 266.504 411.813 240.941 cv
409.566 250.085 405.686 259.179 399.331 267.168 cv
374.009 299.002 335.124 303.827 305.843 303.827 cv
303.741 303.827 301.688 303.802 299.694 303.761 cv
299.54 303.761 li
297.533 303.803 295.468 303.828 293.352 303.828 cv
.937255 .827451 .807843 rgb
f
211.751 106.511 mo
205.629 109.878 204.404 123.757 206.853 135.697 cv
209.689 149.522 224.916 139.983 234.101 132.023 cv
243.286 124.063 220.277 101.822 211.751 106.511 cv
1 1 1 rgb
f
272.234 183.16 mo
272.605 188.238 267.145 192.774 260.039 193.293 cv
252.933 193.811 246.872 190.116 246.501 185.039 cv
246.13 179.961 251.591 175.425 258.697 174.906 cv
265.803 174.387 271.864 178.083 272.234 183.16 cv
cp
f
387.484 106.511 mo
393.607 109.878 394.832 123.757 392.383 135.697 cv
389.547 149.522 374.319 139.983 365.135 132.023 cv
355.95 124.063 378.959 101.822 387.484 106.511 cv
f
364.038 138.578 mo
363.322 138.578 362.588 138.418 361.878 138.068 cv
360.475 137.376 358.729 137.041 357.554 136.158 cv
345.084 126.792 369.618 100.207 384.479 100.207 cv
384.561 100.207 384.644 100.208 384.726 100.209 cv
386.442 100.244 391.192 101.788 386.576 106.127 cv
386.008 105.951 385.393 105.868 384.742 105.868 cv
374.926 105.868 356.812 124.81 365.135 132.023 cv
366.311 133.043 367.586 134.088 368.922 135.107 cv
368.188 137.138 366.191 138.578 364.038 138.578 cv
.937255 .529412 .129412 rgb
f
368.922 135.107 mo
367.586 134.088 366.311 133.043 365.135 132.023 cv
356.812 124.81 374.926 105.868 384.742 105.868 cv
385.393 105.868 386.008 105.951 386.576 106.127 cv
386.479 106.218 386.378 106.31 386.273 106.403 cv
380.467 111.564 371.951 122.661 369.08 134.58 cv
369.037 134.759 368.984 134.935 368.922 135.107 cv
.937255 .827451 .807843 rgb
f
299.618 225.408 mo
289.048 225.408 280.02 227.394 280.02 233.368 cv
280.02 239.342 289.048 247.043 299.618 247.043 cv
310.187 247.043 319.216 239.342 319.216 233.368 cv
319.216 227.394 310.187 225.408 299.618 225.408 cv
cp
.388235 .031373 .031373 rgb
f
340.562 257.417 mo
340.103 256.305 339.203 255.441 338.03 254.986 cv
335.691 254.079 333.001 255.13 332.032 257.326 cv
332.009 257.377 329.588 262.522 323.061 263.43 cv
317.737 264.172 313.457 263.262 310.33 260.73 cv
306.502 257.631 304.216 251.822 304.216 245.191 cv
304.216 242.804 302.153 240.863 299.618 240.863 cv
297.083 240.863 295.02 242.804 295.02 245.191 cv
295.02 251.783 292.713 257.586 288.85 260.714 cv
285.717 263.249 281.453 264.163 276.175 263.43 cv
269.728 262.533 267.3 257.533 267.203 257.326 cv
266.232 255.126 263.54 254.079 261.204 254.987 cv
260.032 255.441 259.133 256.305 258.673 257.417 cv
258.24 258.463 258.254 259.611 258.712 260.648 cv
258.887 261.044 263.122 270.365 274.831 271.993 cv
276.425 272.214 278.003 272.327 279.521 272.327 cv
285.465 272.327 290.764 270.581 294.844 267.278 cv
296.677 265.795 298.267 264.004 299.593 261.969 cv
300.915 264.016 302.504 265.812 304.336 267.294 cv
308.407 270.589 313.709 272.331 319.668 272.331 cv
321.203 272.331 322.797 272.217 324.404 271.993 cv
336.102 270.367 340.349 261.044 340.523 260.648 cv
340.981 259.611 340.995 258.464 340.562 257.417 cv
cp
f
300.704 517.554 mo
300.704 517.554 li
303.258 517.229 305.613 516.835 307.708 516.376 cv
305.613 516.835 303.258 517.229 300.704 517.554 cv
307.852 516.344 mo
307.883 516.337 307.911 516.331 307.942 516.324 cv
307.911 516.331 307.883 516.337 307.852 516.344 cv
307.993 516.313 mo
307.993 516.313 li
322.981 512.948 335.132 510.043 349.692 510.043 cv
349.692 510.043 li
335.133 510.043 322.981 512.948 307.993 516.313 cv
307.993 516.313 li
248.504 515.179 mo
245.246 514.356 242.311 513.379 239.843 512.238 cv
239.224 511.952 238.6 511.65 237.963 511.396 cv
237.963 511.396 li
238.6 511.65 239.224 511.952 239.843 512.238 cv
242.295 513.371 245.204 514.342 248.436 515.161 cv
248.458 515.167 248.481 515.173 248.504 515.179 cv
394.421 512.901 mo
382.043 512.9 370.524 511.038 355.962 510.221 cv
355.962 510.221 li
355.962 510.221 li
370.524 511.038 382.043 512.901 394.421 512.901 cv
400.856 512.901 407.523 512.397 414.972 510.982 cv
426.432 508.806 430.318 505.404 438.977 497.587 cv
444.974 492.172 450.411 485.907 453.542 478.459 cv
455.723 473.269 456.652 467.829 456.649 462.357 cv
456.652 467.829 455.723 473.269 453.542 478.459 cv
450.411 485.907 444.974 492.172 438.977 497.587 cv
430.318 505.404 426.433 508.806 414.972 510.982 cv
407.523 512.397 400.856 512.901 394.421 512.901 cv
.364706 .027451 .0235294 rgb
f
449.404 433.642 mo
449.224 433.259 449.044 432.877 448.865 432.494 cv
448.871 432.501 448.876 432.508 448.881 432.516 cv
449.055 432.89 449.23 433.264 449.405 433.638 cv
449.405 433.64 449.404 433.641 449.404 433.642 cv
.878431 .686274 .65098 rgb
f
450.335 435.663 mo
450.032 434.984 449.718 434.312 449.404 433.642 cv
449.404 433.641 449.405 433.64 449.405 433.638 cv
449.719 434.309 450.031 434.983 450.335 435.663 cv
.364706 .027451 .0235294 rgb
f
300.704 517.554 mo
298.083 512.718 296.291 506.648 295.271 500.01 cv
321.061 498.671 352.728 492.363 386.038 477.48 cv
421.19 461.773 442.382 437.887 432.484 417.328 cv
432.484 417.328 441.6 422.289 448.865 432.494 cv
449.044 432.877 449.224 433.259 449.404 433.642 cv
449.718 434.312 450.032 434.984 450.335 435.663 cv
450.347 435.689 450.358 435.716 450.37 435.742 cv
454.055 444.028 456.645 453.237 456.649 462.357 cv
456.652 467.829 455.723 473.269 453.542 478.459 cv
450.411 485.907 444.974 492.172 438.977 497.587 cv
430.318 505.404 426.432 508.806 414.972 510.982 cv
407.523 512.397 400.856 512.901 394.421 512.901 cv
382.043 512.901 370.524 511.038 355.962 510.221 cv
355.962 510.221 li
353.815 510.1 351.73 510.043 349.692 510.043 cv
349.692 510.043 li
349.692 510.043 li
335.132 510.043 322.981 512.948 307.993 516.313 cv
307.993 516.313 li
307.976 516.316 307.958 516.32 307.942 516.324 cv
307.911 516.331 307.883 516.337 307.852 516.344 cv
307.805 516.354 307.756 516.365 307.708 516.376 cv
305.613 516.835 303.258 517.229 300.704 517.554 cv
248.436 515.161 mo
245.204 514.342 242.295 513.371 239.843 512.238 cv
239.224 511.952 238.6 511.65 237.963 511.396 cv
238.169 511.343 238.372 511.29 238.578 511.236 cv
237.134 509.034 236.087 506.592 235.295 504.012 cv
235.611 498.251 li
237.927 504.441 241.632 509.973 246.418 514.614 cv
247.06 514.798 247.733 514.981 248.436 515.161 cv
.937255 .529412 .129412 rgb
f
281.67 518.652 mo
270.158 518.652 257.962 517.567 248.504 515.179 cv
248.481 515.173 248.458 515.167 248.436 515.161 cv
247.733 514.981 247.06 514.798 246.418 514.614 cv
241.632 509.973 237.927 504.441 235.611 498.251 cv
236.039 490.424 li
242.817 495.775 260.455 500.29 284.653 500.29 cv
288.067 500.29 291.608 500.2 295.271 500.01 cv
296.291 506.648 298.083 512.718 300.704 517.554 cv
300.704 517.554 li
295.074 518.271 288.493 518.652 281.67 518.652 cv
.937255 .827451 .807843 rgb
f
237.963 511.396 mo
237.089 511.047 236.193 510.789 235.258 510.789 cv
235.145 510.789 235.034 510.807 234.922 510.813 cv
234.923 510.799 li
235.033 510.793 235.143 510.789 235.254 510.789 cv
235.255 510.789 235.256 510.789 235.258 510.789 cv
236.193 510.789 237.089 511.047 237.963 511.396 cv
237.963 511.396 li
.341176 .0235294 .0196078 rgb
f
237.963 511.396 mo
237.089 511.047 236.193 510.789 235.258 510.789 cv
235.256 510.789 235.255 510.789 235.254 510.789 cv
235.143 510.789 235.033 510.793 234.923 510.799 cv
235.295 504.012 li
236.087 506.592 237.134 509.034 238.578 511.236 cv
238.372 511.29 238.169 511.343 237.963 511.396 cv
.878431 .439216 .105882 rgb
f
185.024 408.787 mo
184.561 408.787 184.089 408.696 183.634 408.508 cv
177.634 406.026 172.643 398.218 170.284 387.622 cv
167.729 376.145 162.968 334.781 208.988 284.418 cv
210.345 282.935 212.646 282.832 214.129 284.187 cv
215.613 285.543 215.716 287.844 214.361 289.328 cv
191.619 314.216 169.964 352.691 177.388 386.042 cv
179.561 395.804 183.61 400.623 186.417 401.785 cv
188.273 402.554 189.156 404.682 188.388 406.537 cv
187.808 407.939 186.453 408.787 185.024 408.787 cv
cp
.388235 .031373 .031373 rgb
f
411.93 408.787 mo
410.658 408.787 409.423 408.118 408.755 406.932 cv
407.77 405.18 408.39 402.961 410.142 401.976 cv
412.973 400.383 416.769 394.004 418.411 383.762 cv
420.604 370.081 421.348 333.492 380.992 289.328 cv
379.636 287.844 379.739 285.543 381.223 284.187 cv
382.705 282.831 385.011 282.935 386.362 284.418 cv
428.86 330.924 427.957 370.19 425.597 384.914 cv
423.753 396.42 419.308 405.168 413.71 408.318 cv
413.145 408.635 412.533 408.787 411.93 408.787 cv
cp
f
236.334 337.877 mo
235.605 344.349 235.051 350.604 235.652 356.722 cv
236.176 362.834 238.129 368.689 241.336 373.837 cv
242.986 376.425 244.782 378.781 246.985 380.846 cv
249.167 382.936 251.635 384.801 254.263 386.468 cv
259.53 389.808 265.421 392.342 271.46 394.407 cv
277.57 396.383 283.835 398.01 290.132 398.937 cv
293.289 399.359 296.454 399.667 299.651 399.787 cv
302.858 399.906 306.089 399.849 309.519 399.878 cv
312.909 399.91 316.725 400.149 320.46 401.417 cv
324.074 402.618 327.404 404.537 330.29 407.135 cv
333.157 409.732 335.387 413.028 336.801 416.559 cv
337.506 418.326 338.037 420.147 338.38 421.997 cv
338.552 422.923 338.683 423.854 338.765 424.798 cv
338.843 425.782 338.896 426.606 338.845 427.812 cv
338.765 429.714 337.158 431.189 335.258 431.109 cv
333.377 431.03 331.912 429.458 331.958 427.584 cv
331.963 427.403 li
331.974 426.949 331.938 426.112 331.866 425.444 cv
331.794 424.735 331.683 424.022 331.542 423.318 cv
331.261 421.907 330.835 420.533 330.293 419.225 cv
329.195 416.611 327.569 414.3 325.489 412.464 cv
323.422 410.647 320.858 409.198 318.159 408.357 cv
315.577 407.515 312.67 407.318 309.44 407.319 cv
306.23 407.303 302.819 407.376 299.389 407.262 cv
295.95 407.146 292.499 406.827 289.074 406.379 cv
282.222 405.394 275.587 403.693 269.059 401.608 cv
262.526 399.436 256.157 396.61 250.211 392.816 cv
247.247 390.911 244.397 388.745 241.797 386.227 cv
239.163 383.728 236.914 380.761 235.032 377.735 cv
231.247 371.595 228.956 364.484 228.402 357.357 cv
227.844 350.22 228.977 343.132 231.27 336.695 cv
231.755 335.334 233.252 334.624 234.614 335.108 cv
235.781 335.524 236.469 336.685 236.336 337.864 cv
236.334 337.877 li
cp
f
361.313 336.468 mo
364.615 344.902 365.265 353.89 364.112 362.805 cv
362.958 371.678 359.517 380.574 353.547 387.624 cv
350.601 391.16 347.055 394.15 343.248 396.626 cv
339.414 399.075 335.295 400.926 331.107 402.437 cv
322.672 405.312 313.923 406.516 305.29 406.874 cv
303.43 406.952 301.859 405.507 301.782 403.646 cv
301.706 401.811 303.125 400.256 304.95 400.142 cv
313.122 399.635 321.175 398.193 328.675 395.566 cv
332.387 394.186 335.977 392.534 339.232 390.417 cv
342.471 388.28 345.371 385.725 347.852 382.82 cv
352.826 377.004 355.799 369.599 356.866 361.813 cv
357.848 354.041 357.433 345.854 356.056 338.104 cv
356.028 337.956 li
355.762 336.456 356.762 335.023 358.263 334.757 cv
359.58 334.523 360.845 335.268 361.313 336.468 cv
cp
f
212.436 517.666 mo
205.257 517.666 186.715 516.775 169.618 508.518 cv
151.232 499.635 140.163 484.716 137.608 465.368 cv
135.318 448.026 139.872 432.066 150.431 420.432 cv
162.131 407.542 180.119 400.813 201.036 401.561 cv
225.939 402.419 247.524 416.065 266.569 428.105 cv
277.764 435.184 288.337 441.868 297.378 444.268 cv
299.321 444.782 300.478 446.774 299.962 448.718 cv
299.447 450.658 297.452 451.814 295.513 451.302 cv
285.393 448.616 274.36 441.642 262.679 434.258 cv
244.417 422.711 223.718 409.624 200.785 408.833 cv
182.039 408.18 166.058 414.042 155.821 425.323 cv
146.724 435.347 142.818 449.228 144.823 464.415 cv
150.603 508.173 202.16 510.39 212.436 510.39 cv
232.644 510.39 246.744 509.641 246.884 509.633 cv
248.883 509.505 250.604 511.064 250.714 513.071 cv
250.822 515.079 249.284 516.792 247.276 516.901 cv
247.135 516.909 232.855 517.666 212.436 517.666 cv
cp
f
210.349 83.4053 mo
208.073 83.4053 206.1 83.8789 204.52 84.8848 cv
193.28 92.0381 187.592 131.663 192.1 171.414 cv
192.163 171.966 192.097 172.526 191.911 173.049 cv
191.858 173.195 186.656 187.938 185.126 206.953 cv
183.739 224.204 185.177 248.654 199.904 267.168 cv
227.045 301.287 269.751 304.387 299.54 303.761 cv
299.694 303.761 li
329.472 304.381 372.192 301.286 399.331 267.168 cv
414.058 248.654 415.497 224.204 414.11 206.953 cv
412.581 187.938 407.377 173.195 407.325 173.049 cv
407.139 172.526 407.073 171.966 407.137 171.414 cv
411.644 131.663 405.954 92.037 394.715 84.8837 cv
383.974 78.0502 354.914 95.8096 337.149 120.088 cv
336.247 121.323 334.672 121.859 333.202 121.436 cv
311.358 115.127 288.745 115.13 265.997 121.447 cv
264.536 121.853 262.981 121.311 262.085 120.088 cv
246.932 99.3793 223.563 83.4053 210.349 83.4053 cv
293.266 311.107 mo
262.449 311.107 221.42 305.91 194.209 271.7 cv
181.35 255.534 175.705 232.878 177.887 206.183 cv
179.323 188.616 183.621 174.866 184.776 171.414 cv
180.647 133.836 184.767 88.8291 200.613 78.7446 cv
208.184 73.9258 219.98 75.8374 233.827 84.1269 cv
245.57 91.1562 257.35 101.88 266.459 113.787 cv
288.873 107.978 311.164 107.973 332.791 113.767 cv
341.898 101.87 353.673 91.1523 365.408 84.1269 cv
379.254 75.8374 391.048 73.9267 398.622 78.7436 cv
414.467 88.8281 418.588 133.836 414.46 171.414 cv
415.614 174.866 419.913 188.616 421.348 206.183 cv
423.53 232.878 417.887 255.534 405.028 271.7 cv
375.897 308.317 330.926 311.669 299.618 311.039 cv
297.558 311.081 295.437 311.107 293.266 311.107 cv
f
235.197 138.578 mo
233.044 138.578 231.047 137.138 230.314 135.107 cv
231.649 134.088 232.925 133.043 234.101 132.023 cv
242.424 124.81 224.31 105.868 214.494 105.868 cv
213.835 105.868 213.214 105.953 212.641 106.133 cv
207.875 101.988 212.794 100.244 214.51 100.209 cv
214.591 100.208 214.674 100.207 214.756 100.207 cv
229.616 100.207 254.15 126.792 241.682 136.158 cv
240.505 137.041 238.761 137.376 237.357 138.068 cv
236.647 138.418 235.913 138.578 235.197 138.578 cv
.937255 .529412 .129412 rgb
f
230.314 135.107 mo
230.252 134.935 230.199 134.76 230.156 134.58 cv
227.284 122.661 220.209 112.339 212.961 106.403 cv
212.85 106.312 212.743 106.222 212.641 106.133 cv
213.214 105.953 213.835 105.868 214.494 105.868 cv
224.31 105.868 242.424 124.81 234.101 132.023 cv
232.925 133.043 231.649 134.088 230.314 135.107 cv
.937255 .827451 .807843 rgb
f
418.181 482.398 mo
407.723 491.97 395.258 498.082 382.697 503.316 cv
370.045 508.424 357.01 512.404 343.761 515.422 cv
330.519 518.464 317.067 520.616 303.483 521.697 cv
289.906 522.719 276.155 522.808 262.472 520.676 cv
259.056 520.14 255.646 519.471 252.267 518.592 cv
250.566 518.219 248.901 517.634 247.222 517.136 cv
245.965 516.749 li
244.514 516.16 li
243.517 515.797 242.664 515.192 241.75 514.687 cv
238.303 512.362 235.793 509.166 233.994 505.829 cv
232.226 502.461 231.09 498.909 230.38 495.331 cv
228.989 488.163 229.229 480.845 230.851 473.809 cv
232.484 466.794 235.612 459.971 240.495 454.376 cv
242.922 451.584 245.772 449.125 248.928 447.15 cv
249.715 446.651 250.504 446.156 251.344 445.757 cv
252.217 445.344 252.892 444.882 253.958 444.524 cv
254.95 444.129 255.948 443.792 256.948 443.617 cv
257.959 443.357 258.933 443.269 259.91 443.177 cv
263.808 442.865 267.354 443.332 270.74 443.776 cv
274.125 444.242 277.372 444.751 280.567 445.041 cv
283.759 445.337 286.891 445.425 289.949 445.17 cv
293.002 444.893 295.905 444.178 298.934 443.161 cv
304.93 441.155 310.811 438.231 316.617 435.106 cv
328.217 428.718 339.631 421.505 351.793 415.311 cv
354.787 413.697 357.956 412.34 361.037 410.854 cv
364.242 409.583 367.341 408.1 370.656 407.048 cv
377.128 404.603 383.999 403.051 390.948 402.066 cv
394.462 401.758 397.978 401.369 401.481 401.529 cv
404.988 401.426 408.493 401.928 411.998 402.244 cv
418.975 403.339 425.872 405.323 432.292 408.51 cv
438.734 411.64 444.544 416.207 449.197 421.738 cv
453.863 427.27 457.294 433.819 459.301 440.73 cv
461.39 447.643 461.868 454.911 461.295 461.958 cv
461.186 465.514 460.326 468.978 459.729 472.473 cv
459.33 474.204 458.713 475.901 458.208 477.615 cv
457.929 478.466 457.702 479.333 457.377 480.169 cv
456.259 482.633 li
453.388 489.223 449.031 495.323 443.493 499.975 cv
438.016 504.695 431.663 508.167 425.101 510.68 cv
411.898 515.718 398.019 517.143 384.487 517.802 cv
377.688 518.12 370.874 518.159 364.06 517.888 cv
357.208 517.607 350.52 517.108 343.517 515.955 cv
341.605 515.64 340.311 513.835 340.625 511.923 cv
340.94 510.012 342.745 508.717 344.657 509.031 cv
344.804 509.056 li
351.05 510.066 357.774 510.581 364.328 510.819 cv
370.926 511.064 377.545 511.009 384.151 510.681 cv
397.343 510.018 410.56 508.541 422.506 503.922 cv
428.45 501.627 434.016 498.532 438.705 494.473 cv
443.453 490.468 447.085 485.328 449.546 479.641 cv
450.513 477.524 li
450.793 476.8 450.981 476.033 451.222 475.29 cv
451.652 473.784 452.2 472.318 452.549 470.785 cv
453.048 467.664 453.839 464.584 453.911 461.406 cv
454.4 455.112 453.982 448.74 452.171 442.785 cv
448.77 430.826 440.261 420.6 428.957 415.123 cv
423.347 412.341 417.228 410.565 410.949 409.568 cv
404.639 408.802 398.153 408.65 391.845 409.404 cv
385.529 410.311 379.221 411.702 373.127 414.009 cv
370.034 414.978 367.064 416.407 364.031 417.603 cv
361.07 419.034 358.058 420.314 355.143 421.887 cv
343.369 427.87 332.054 435.011 320.144 441.573 cv
314.138 444.797 307.962 447.898 301.226 450.153 cv
297.894 451.278 294.254 452.175 290.607 452.495 cv
286.973 452.801 283.374 452.686 279.887 452.361 cv
276.397 452.041 273.011 451.506 269.749 451.057 cv
266.497 450.615 263.328 450.257 260.525 450.496 cv
259.831 450.561 259.131 450.616 258.516 450.792 cv
257.853 450.894 257.269 451.111 256.699 451.337 cv
256.153 451.475 255.412 451.952 254.768 452.252 cv
254.088 452.567 253.458 452.97 252.828 453.369 cv
250.298 454.953 248.011 456.919 246.035 459.187 cv
233.535 474.975 231.099 509.794 263.603 513.453 cv
276.471 515.47 289.755 515.413 302.913 514.423 cv
316.088 513.379 329.217 511.287 342.133 508.322 cv
355.04 505.336 367.801 501.607 380.091 496.783 cv
386.231 494.374 392.293 491.767 398.078 488.707 cv
403.851 485.652 409.465 482.276 414.301 478.145 cv
414.368 478.088 li
415.576 477.055 417.394 477.198 418.426 478.406 cv
419.436 479.588 419.317 481.355 418.181 482.398 cv
cp
.388235 .031373 .031373 rgb
f
238.148 459.878 mo
240.419 459.346 242.578 459.214 244.685 459.247 cv
246.79 459.288 248.842 459.516 250.857 459.875 cv
254.882 460.606 258.78 461.84 262.474 463.68 cv
263.984 464.432 264.599 466.266 263.847 467.775 cv
263.119 469.236 261.379 469.859 259.9 469.218 cv
259.859 469.2 li
256.707 467.827 253.273 466.928 249.836 466.489 cv
246.43 466.061 242.853 466.093 240.023 466.91 cv
239.989 466.92 li
238.058 467.478 236.039 466.365 235.481 464.434 cv
234.923 462.502 236.036 460.483 237.968 459.925 cv
238.148 459.878 li
cp
f
235.608 483.374 mo
239.252 483.854 242.964 484.342 246.728 485.152 cv
250.478 485.962 254.314 487.152 257.842 489.078 cv
259.192 489.814 259.689 491.506 258.953 492.855 cv
258.253 494.137 256.693 494.649 255.382 494.068 cv
255.353 494.055 li
249.297 491.348 242.204 491.021 234.949 490.622 cv
234.932 490.621 li
232.923 490.511 231.385 488.793 231.496 486.784 cv
231.606 484.776 233.324 483.237 235.332 483.348 cv
235.608 483.374 li
cp
f
183.913 480.106 mo
187.786 482.874 192.023 485.499 196.266 487.892 cv
200.534 490.29 204.915 492.474 209.375 494.438 cv
213.824 496.438 218.407 498.067 223.021 499.492 cv
227.642 500.918 232.354 501.856 237.062 502.558 cv
237.204 502.579 li
239.192 502.875 240.563 504.727 240.267 506.715 cv
239.971 508.703 238.119 510.074 236.131 509.778 cv
236.033 509.763 li
230.897 508.853 225.836 507.675 220.962 506.015 cv
216.093 504.357 211.31 502.49 206.718 500.265 cv
202.11 498.071 197.62 495.665 193.264 493.047 cv
188.895 490.405 184.709 487.655 180.554 484.498 cv
179.338 483.575 179.102 481.842 180.025 480.626 cv
180.931 479.434 182.617 479.183 183.829 480.047 cv
183.913 480.106 li
cp
f
370.732 207.305 mo
361.524 219.494 340.45 221.712 329.294 209.813 cv
326.418 206.939 329.497 201.045 333.975 202.839 cv
344.138 207.211 355.481 206.966 364.9 200.805 cv
369.225 197.906 373.702 203.939 370.732 207.305 cv
cp
f
234.335 200.805 mo
243.754 206.966 255.097 207.211 265.261 202.839 cv
269.738 201.045 272.818 206.939 269.941 209.813 cv
258.785 221.712 237.711 219.494 228.502 207.305 cv
225.533 203.939 230.011 197.906 234.335 200.805 cv
cp
f
327.001 183.16 mo
326.63 188.238 332.091 192.774 339.196 193.293 cv
346.302 193.811 352.363 190.116 352.734 185.039 cv
353.104 179.961 347.645 175.425 340.539 174.906 cv
333.433 174.387 327.371 178.083 327.001 183.16 cv
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 25.2.1%%For: (Irina Mir) ()%%Title: (shiba_meditation.eps)%%CreationDate: 25-04-21 13:33%%Canvassize: 16383%AI9_DataStream%Gb",Kks?'*p\&q9gd;.KM$[Hf]n3!FU20m_4#TY4O_eWLIa3`K[D1lbeO_fKa>d\1)/#J8;Ur1GII#S>NDdHWbnY.T9)i*e(l=Jo%L]m]5VIjJ5k>$VDH\\sQ/Q6uZV`uPt+&\(?C#i;D;_J9mg2WsR$*)P#;SH,0Xs>p?qo-L)Im_!GM75c7?hu:XOnUYU;mYe:f&]XZ%+7,4A"i$A-dg"OU,nGE0V(jeHT@*"1mM2\^1oSr<Ab9B3p1/@l3ZT"%HENr(XBI#BgA#&PPF5N4Gp6r=]2+)1'-$SQ=JR;q-"u1M%>Bs,>YHSJVeU9"WI;ME$c*472<gN,NPE@b.W@\$V9?4Cn_@nak$9['\p34mph%VG2[6C6J(?8;:2see=(>bYd2n<\*in&4Ii^`pR%^1Zaf3=X-FDPpuHTp:PS!r\M=$Ej>R^8;DkdHX.BCPrLJpe_n<<?=OIjfp#"ZLLZ!c%a61Peb&9DV^rS=XI+bjCsX8[kNNc^Y;50%N^hG=d5<EMqunVa2h)SWb'C`;0]4BIUa8B2o2Bj330'Yfa/#dn?&)-M[6;,&XPjC[s/&;nTJcM1$iX=$4:h@+:shP=?E'LXr[-hR%5f\Acoq\/i.^+c@)P&':`RD;::s&ufg3%K':>TU`NU3)5efE'6b"Y\W/1]iJ\<E22gR-s(?J,"e#='6--TER\`O!uQY:q7sgI]#7%TN_]N8mB.8KFq#g-QtUiV&_HId8$&YEjaj/GT7dUR)O(/erC'=N[hT/>]E1>R7Na#W=a$WP0:<'c&i<6s2CI!]93-+`d`<bF9&^P%:^kZ<aNMh\#i6KaK2\4^]9qD*'lXCXqR/[T?R/n%QYuG6c-Q:q%Bl,k*r,Wo@>T<nMKn:5+ogP.*p;k]dr)!]0CKXZ92c5ag!Wl^%3"IdP;MFNpRlJ"U6=1KA$VX2+B,*Wu&"rC95&!5_?6&`"g0>ppkT=LaIr5+5ph2uoU3<Zt\okX[/]a:$OiQa9_k2/L]l6uokGj6u%Z_B%lI\i@RjFbqMeQOZLdk\GC8n+PnYMLVO8u6q$Z#)]_f,6Jf/,I:rNaj,,4=\d7gKl[i*BIgWjOIaL3`gArYBf?P?Y,6l5G-9X%<;c<(0%4U)*ksYsMuImlCEe@3-7mJkCLC:sqm<N*Itu*@,JulX4.@IXdV#_6I89h5CRNrUgf8Kmg$#1$5quS\5$`YTS_--.>ITU]%]Y%VD.ilghk;2XbgpS8]N^<'WTI42cf=<*1e\l/b<sr3`>:Pj\@O=igrGo\qWmUFFq*=8/\3Q;(Vc&-bJ2$UkVrtZ;<RU\</N5m@%<i22?*:+a[X/:pcfA*m'=?`k71N!g5s"!/goNMZP(&\39l-WK!?bcF43r^`DbBn=RD*QUcQhe,Poh*4'hDo:h<j,bj&5gXSs2!3c%XktqD\U:gu'`%L*>R"Ym?g1g&-)ct<3Fl\/2;1Ei50`cB+1AmS-UO4nm]'S$Wouo:1tMQ&D&:`+NfXJI@<L4'MPX8>*09Ko/\HL-%`HpJk;tIa5hi`r=?D7gFho_3k%<a5;f/d?VpL1ZWD97[UL,tXV^*c)"E3pL=qZ$)?)G_@"k>;KW@]E^F3Z^NF7D^kF]VT$nI0$u2%%d2_QDu29PMZ$@2L(p!kgU[;lb<IT//"'dH$ZL+=a&#aF2aHN2_[^.(mrCQu^@a-J9MQbcH's0DZF,/:Z+1<P(pibb5e,T>4[_Fk%gC2h.M6-jlj(CK_e[C,(c1P:LMhB%1CAuhqo%P:2F$!@RN"9_^f%[osi=\gXQN)@=JQpt<XqRiLKk[88rF$%s)3;K/0SLr&ZG\uY%Q`_i&SO`[`PcIP9VMW;Ld?l7!;ab,Q$.YV\9G<D"U+oA!VAO#@]7.Fsc2#><I/UgIr;K*56uL%e4s#fYH/8E6^T7?8&/3#9]+o_:%EMV5?U*d9$q-LB%dIhW>(j9OH7>^e)d^Ze`imSu7P[]1UfqHh[9^j1Z,opNO1=irdI2HJ]7,673OK%FAb!*`MNn4)g=mBuU=01eM%+FO,%l7iu`;jLi/n[SHKW#Z5P.?\?(ZMH18f&&hr0B9D8^]+Ikr=<:@M#096pZiS&Y#VTPcO[F]k!SF%b&F)n?ap!9P5i'da33r(%;n[5=B7eTk5C@6$#n^oZElW>i*k)$^EiBli8'p7*ZDXjJpYOM6WE?:u,O?pegM/<e@b1Q^GOZ3fqD#>kN+(P''o2V0f]8ZZe:&]F%].F/n\@@Cp!HQ3fU4+c)h>P__T;uu.7m(tB>7A73BAdI6(?2TH/@8pO6a7d]K%"!A)Vk!i=mSmhF=ges.]9H;aib0Gb0>FPa*Pse%YArWr_o[&V9[k;?=Su4_+"n],UB4\L6AWiTn1D_RhYPpR?b^o%JJjefJ=_<I_bKST0'aT<RNsd-0P3.5Hu@jYN@-_7<Q_eL`%gVW%A$$P[F/UQ%%m]?^'E<[XY4:#`Qn6"]*]]b2`ano$9XWkmF7l4mRj&l:/Fg`#mjI3l#Z>IE;HscAg]5$4/:Un['U.YYR:PNJ%O[4U%\W;`Y0i;]+`nQl^^Dh0J#8*h^eL8:ZB+g8UZZ-#7EKN.3`.!jOh6j)H"Ao'$*9`c?g;"]l&_KKF[aE>Hrg<WNX^&9(pG2i-e/nDH%G]Jh<^>miGdPsN,^HCE>k@BSVh]%+R`FSr'<2_iMCiE'K?gSRBr-e1f0,B3<BoqNCdmIDfn^pM/Z9,^.pY==k4LWeRm!FHtU(Y+7%SVDCnj/QM*"BEGgZn]s%a!S/J=oWa+?==E+s!0l`\d)QY:dq>U?A_/&8(%#b*]n6*l<]_?5HYP/S_Pm\$N8d%5F"K?"ZO>5UsT^)%rbKbV0=LgkrCj(pW"3ht78+Q;R-8).20\DadIiT&4X='UGU8"BH=Q?cn%cb3WUPh!T'E.q>YR,G_lF?'D4qTHnf3^MZkhJ+nfCC+%(Ta!34YO2FP&gBrE(`k9r#Lu*d-GQ+"0"a-]L$=WHtY8(@hP9c>'$%/>4X8^j'VA,q;5Z`<Quh6#^rOV`+k6bre/5`\4GrGC.g:l%]s4uAR&n&X=m@&.Q"%Vks4"&@nMpJe;)f4&kSY1jj0JZh_B@WYXSn1fK89u`N/P%tn\n5>+F8"eQrs%\XI!RZ^aNZD1Qt([?T\lD%2LmVZ+N,qZq-r>j**Z[-anj$dKSYK#3XLJ,"@C%4`J=nrO%X.r@[\:+d)KVpP<ar<d1;F+LmX:(\=h!SUad\ulI_m^-L:]\]b$BR%=5sjQ\,bu"\,GWaHYcrRJ(V<PW`[)%O&u+m&J(WN(>CC*nf'<@-5s@nR#"C0W6+B"]!dj/@WFDWCrNd6Cg^-qD,R%jLK$s*HO9,&%b2pR[.QLtCS:=$/fj^VeN6+q1nRFnY-3S'MTP,j!4I.&o!YpooQk63g8YCZ-WNW:36D#S+eBad`gORD&r%oQm'Clhrne;b*+U7!V%-7A>aP,GgF2;H50*L$8QHb$$R*Roo%l=EYLAV)'i+%)QCJ3r$F,UUS&CLThnbOebcEo>QXL)96u'sk`!Xr*Y;S4=@O/fjrfKni,*%.2</o.ZK+ck\h\3s/j^^qYr&DOGLsF>#D)Z\k9UY9moe5?>c9j.fF']M*tT^_O+nk.RBcXpU5OEZ:*4u$5:Bg+2;GkU4KW2Y9hm%%619'1MTq'$a0%-2RiVF5q#6ZE6N81BJ$W*&Q`C!qq-V"shA>or@r3<V5T`X?q`$5DL_"*YRlT$7Lnf8i?C9QCZ@<d%qitFR[LgsJ%JeJ)#_.+d>N)M2NG0'1uco`XhHG-/S]7)AhQ3f&_bJuq2Q9H!5@WM$`?)V_oDe618Fj[VhIR,Be4*>[ASi0/0*@D^^IY9>FM0d'5%ZE<]A7`(#hp.*\]?QFNBn+&I4^EA#rpV1(T"YdNpn_Ys1DrS&"@C0t4Z2CT5p]hj5VP*E]8n0_Je9']HS9QJ1?HS+knm5YFaidW^%,p#):;T@]?-=4ie^Onc,9=^>"^91OiI?`Q\D+mp%(+N'YTO1V$qB"_hV8$&L.R?m9,t\iPdM:k]8upiiV0l*DXT[>-;T1<_20_l<%US"S+j[3LAb+L;,9XZiVO<P%[0E-.:M1RQ]OFF]k[$@C``S1:s"kS3\5SN3mL/EV-4!ll'aFZLpmGGH@I>!c?DG2t:>jm_K1"5F>%kpWa`Ll!(ND8dNC7r'<<V'=sI0=%:S<OZm],Z1F+EfJ,Z3`l=ET%92EWVBtl=i.5!a!Sg6[)?\m4cCucau)c/,E]3tPb;o$o"@GE%drLNnor'XN[S3bS]URfog(N+?['_2:]s,mq@VqN8>:.peM7$o(D4+L1-J"K>[H/c<>OJC=jTiS!ge.'p@4]!^.>#LHGT=]@%T*\C%`n2PkosR<E8!OlFe`GQZ'-@&Es2lVXO'n'.bFZ;rh0WKR)d6`<f=TZ5k@O&[2X1"AMS^;W>;p^^q);h:Ii<A-7Oe0'niD_^i3B@%%1*2>9F1#LBf9an*6?rF1;t8nRoJ'86A)_&A-P\iuVgdN&r!>$7(GC];KJXH/M\d'%VlVErAEaWcAMH4@8QhHgJsT3Sb)DI\(c*?p%.4Gq>OtuuloM:P1S!905aX(LFC"b9S<o`4cm,P=^8"t&u8BsFjF?[:MXp2->(&8MjfHi_0&>`!\N=g(&`f+^uDUdH;9O;=cKm#"q%f_[gAZh3]"?/jb>*-&s0&X811l5jF#:5YNI2j,Y4HL#3:In`ONrd0!\kWppH)6osiJ$pC4PLhomoUoP*(ZHp*NN3;pnQ>cMH;Ik4%51,!0HI,%jMY._&>Ru^KEOK'^qC@mQ+`Y^_B&g.IE4N`o/f3@!;#[%!<_P-DMo4EV,NO;+#Se0>C94mm(IQ0+ptWY=5p`CoJ?sR`%Wh'`YI4G=lb,t;k^0dbmaram(j3"P04-e`>SRB)P3Jg]5NpB<:0Jlf`*Kt;3^"AA"q83Q$9^7[4lAp&Rj7fW>'&?-]1n7%SV#3HC%qP1)[N:?PY\@CG91rX'9U,Mae9&s`TgTt.6G_Bk;FNU07Z(8=W\*p:u0-"P<rjUijMG)3Fk_e-h15aEn5A@!)eW9-4Ef(7IFBb4+%*.q=B?1I/3o7s/I>V_K^:V;J]pUA3RS<U:78QK58&GcXbi9tSMYPGHF;4YW;rTVnN1$j.[8@g\46Ti.m,3sDj.40$?5>9QaIK`ku%'R?rA%.u!ri^?uJPGH1mn<'=i0=JfMbC3%[5@&"D/aC3/MdLiEFj\H%@raHe`a$Fd[`49:Ls,?:&Jl+OBqdEVfMYC`=FZ^`'U/Ln%A!Lb;@\5&C';[.TN$Jm*;bV!p';]E;1ej43M:*(_V<N1q=H?m.fC,'35+M#[B*US+qKn9Vqj;%dPD&h*%7Pb7_YnGd/e*E0T8qTg%_J(_U(pK2WQ%m+TN%M:hH7eZs8/n<Uo]!mJLVL(^)DIso_74NNpG7#o$/JQ1qjC^Vqat[@R,N38(;HJa!WTsp(KY33?>OJ;OFAB9%nU@KC04Qe-(GktP^[78#9>=SG5C=pJIr;*M]QX/W6bkp8mC%n/8c>9pFuq=%#lhbg[l(E/mBt%*3/+dUGA'R:rf$dCi-9(:CXqgA%]&0")s141a22oYhd:;jDd;d-g=DadfJp<=m]>oRBFhZK+*YR%<pq"4sLc#dLIOc!\*ddZ@,ch=ProlN?%:;@"S$Bc;m=_COrP*BP%(lTTWa+TV"YIjPCIPLMkHeB(up!:4-5<`C2Fqja2A1`9LErSUIK9)A%4q<2E7U^W5HE$ibpbqoW/:EJd_8et;)s;)-EB//!iFP7R%(B+=fMk,MX(-d]n':?#0(bC.V<YcL#0Es%cbGgQ=b2RI,pLRp"QZ.qH9b>oqZ9R_&>k-f2s2k/II\d)lJ'b6)LL*A"jISTJek02;%5<l+!b3r9$ni&#+OtTfFI-NO>FY'Ds3,U!X>Z/4-o2c1l[pq^\7mW'M+CP%;#SGkp04?ij9c2i]?D!Z<n^qG`9D?=$hkf8ID]jeR%:F5<SLeS3]r#2LG5DU3o2i_?^[-3Jm_\;N<0gUb<1@S3s&`)oHK)]&"^4(\GXgfSH=H9SP8aPIM=PsC$j=E3C'#t@/qXqh\pg(h!%!3)>rQMtrV<lF)GK)\*3ANkpkmB_[WXBtp[14)+U@ceqrpf[3lo"k,m[K2ePM+P-mc1e]snF2h3jSkH<5go'R%S:@^@3f<&"+N?_%D>`\',UR'dVh!41+:A*;Wl5p?13R]'R-`n[blRVLX9Z#SS/B._&3mPs-O?kn,sHYn$cOL`KOYoOicb5!`_/3Z_ZdcuomAqEk:e(q%g`J"8H/Zh5WKb)qpi0_&j1]BKMT[Lb->sjfg/:P]j`8@hhahRVCWuO4`9.=oI,i<7qOTAn[u8r%Rn(h9U#kjL<'7%+E&!`EDVbY:%ElI5Q;hnr^ip'm2o6'p,LbXgD?FFqj,W7.Fl>>Or0D[Un-#lo+#*m0D^ErN5RsmPn]?u4If^l1DatG,AU0L>=:4Tmuh0g(QWMtUF%!Q#[5U:mmu..\Zs^eWai%IJXGWb64]Ica."DjM7RBmi0eTP^UuK29&(neMfegY+d(i\^F;rEgh)CX?8*RTajXXQWH%?K5C]fA_'q%HT\E!Ik[#*s8H5dp4e4bXZggJs5%\_pP'2Ss0>t1SYG%eF_^_`Z1M+[^OU^F-_0p&!r>G5lB"OP#g-ka:sK<*/k4i6WYO3B5Atpa%312PMNp/Qe+=1kdT(#GQ?r.ejn-i`/:,qUbqG\spnBH1Rnq'&QTr,R)G6a!!+,r[SRbsW/nH@OEA^:2rC)!@6*]Dp0ajB'-p@CSP%(@^UMYO8[PL%crO^07SAmtcu.X+0a8<+l*XEMiVH(,!+9(]QDi$2KBGnhYLK3+WKZ=m./cj%B1+HGZQZ=cRTh7j!t,]=+FEL+AP.%+)L2/<at%KM'iqJ:MAIA-c-?0IlGp2*_p6<_o.0jf2+S^B:?uYe<Vk,%r56!VSEU4-qC[/i/o'Dd\S>&D%j<\__XoS_NPc(>Nr79%pfJ5I&@2_uE*O&PPa4aj"mp0eM(,/pmJ'+g^i4uRE3Mr*bJp<Q+W\PK7YaIF_J)$;?ATaEK:;Ep&rRHG\9&^.qa;Gh@A`(E-GVLs%l9:$5:LFjT[Ouge%c^qVnS8'foR#PsPfI;5?\F-B2thNA\CRc[VHsOc[4T/U:X*2u2nfq;^pg800mdU[Q;7QHT-1?IK'[r*>rusq%1Xrr]+O+4Fb[eTr%2"k;08G?TZ^9MK6&DIULe=3g-j2Cl9=t&`$Q*DA(pJO/IO,5?rFmrb$i*R6n^H+Z?_0S+_7:M^qoZqRW>i"T%X]0^f9&RmBI'Fo7WI;`&;dK2WFJ0(``TeaT<HWGOjt_9D89akGY+`7YmL/!G7b_1F?EKJ"ESXsU\,P;F-5>N6RCcjoI>[k99?!UU%b5_Hk)QW=XO+)f0n;oR_Ci<B8[dac#9_n/O(Z!'F#mL&gQ8hfp&J(jhn($a=IMrHmk&ZsJK)P4/ZsSG[VQnoTqiXISB?so<7T6gV%$)BKhgKd?4F>K``8BZtFIf@r70-f/&j*3X;_f4e)L)GbZ02o6K38W$V?JE"?eOXA*Y'3jeh$eFR1-TW@9(CS7pBJWF*i3m/=31?b%2B_#/:nrN3:07$;2aQi/0B:%Ap?k\T;Xj]Zc#QK)5`;]IK3k\rOa^ncpn.?'51**s"jmp8r4$0KAE>u<:VL.<09E7i*6R9\,GIj"%hH3Ua$F5#JS&^fBF`(mWIbnA3DQR^Qh-2F38iN$.>0VKmosWJ\p?o&2Xo%p!D)e_ST;R%p5B1&TKm3!b=?7:i9ZHJ6g)'d-.a`e?%&c(:&*r-IF/@pm[?t^?3p9mEkLcE4rp\K@j9Z4_7;n`1r(UqchK[V!Tpk[\)9ql$Nf3,'mnTVD@Fole?nuL=9FZ3[=o(+4p\Xp!Z%8VsgQPSC!)]#lqen9QuCV=JpYn2HL0h3_R%b#Ml*ot?)uDUU7fo;ec70m1QYl[(rDNeqNTQ#AtJ/GNR(Z(9.ir2X(UjEI,L)*U5_%b(k(;fo<D+rG8opg)'\P>t7i$>RHh`1ghn>cD<UK&_C_;oD2d&]j<38:AeiYW&-GB>F)R`g[u2.V05l0/(k'?K.8#W='\X^DD`\U%QMh/JPpL;t\SS"oI&,/52N?HcjJo&h?OQ(K!S`8tS=_'Y#$ghHn6N;`\LZ3Ge?r7/[jsDnNuW/n8jbGDUab.!4_<])L3@Dt1pRcJ%;>/1!L!HkucSq&$7sJ/5_*md%K=1.r@^sYma$Bl?^2#!'mF&+B1(J1$YLWjV/kS.bHXnM%3u<ae@O>G0])(RI\G,SUqK"1r!k8,3%ikWl^+]i<Kf>ZPF\rO#$dm^F,/c?CfrJhr0.!BdX[TP)0:Mffo4$Z_!]W[#o_7s]j-AU>EF5jQUF^<.&kn4N='gCIDFZ&CLh"uJp%ft;Bb4,*2`YsVtfC]0bXSN%jCP5&FXHm'`4Hd?[e>c2elE?^qA^?\`Aif,jtRQ-;TPL4"]F*2("Yk2:)Y;L1IbL@WPXYjQ4\FmVu%8q!jF[',O:&lA7,TFpV7\C[\!:!%aAEdOG:OAY^RUR\SY=hPu&aJdtb2e5_j(8K.hL"cEp]'P*brc<2Rj=Xm8Q@6%DKm\>mYi"dJ%K!]fLg2!\TrKq7=puVHP-Gl:kJ.ZEu(N?-3O'(_-!SpPpIYO6<G+i1<^)?#'4V=diRa.?GotUknN%q>TM*V@[E\KQC66!N1+0f&(%-[+5%/.JqE3IK0!9-f:XMD[U_nrWI9;Bnetmf7sJ^3qDim5U+?<qdRcAs\=PnsukbZ`E5#a*tp7f'A,q>]7=0`D_-!;!1I7meg88%CTiklmFuN%CIZis+[nAkOI)jj7dGr<V<i/($3#m7U/IIeG8fP7q__O\9c$e&[]97@0+G/='0)9_[R^3a4.IIi$aY$"_a`WH%qA:q%U_&]Co=8=lW0'!dh:%DVoS^+^K%'of4IlXiV.D\+X`:ha[o:W9)lH9s#F10qm4CH^F61>C.Bsp$X.uf'>-!nU)B,:eOa2.m="NEt%[\5#@K5X&i-cFsqTTpF-D\BLWQKF:i<A)2%R,H'E`6l&e;FZ%G(LW%Wi2N%VqgS(4cJW"Y2`-I78o?GhPC?ZcbJAn7=0"WhqD.j&%+fo1/8+g&R1m`qp`[!H^&s0+mDc,8t&I1VpG"DW]l?7)XVg89C[alWhCVPeMi*%o_"QB<?PaEDYW>hD&""Lste2P5c_I?E_I4g?2%Gpgu_jb=7NC>;GqUM9Ij;C*8m]+7*1Hs!DVrS5cUpLspC0Pm,N,5WTfWd-5;\c2hY_Y3:<dgNRqk@j4.\Rj&gra.Zk.VJ(*K0*$O%`h`>65rMdt7.0JQ"RA+gF^+d<*@f`72'!A3C>!cbhXQtJL]I@qlV`#L'<g`@Q9M2)YIdSTIFW'[jE5V<MoCFq@R)Re0A+PmU7F&n%FJ2:,(TJjp)i;8q9j;kNSSBNW*M^bSQV"CPTfrU#6'EA^RCrWuRDS^1rWa;)=K:18FM5CbOXUb+!%Q5]\nO%d[5dFW4<<4N<$^h1%BnAEccELr>Ka=_T:Uk5paH&+QoW30.FKF=>3seA8oT_<#[32[)PgkQR>C/Tb$>\nmHL$bq*XmL(?=[0`)q^"mY/W2e"8`cL(SaC4%=2/3`j4B_0Ys+_]EhHBiD=k#QiGEtKX2f@f7c`O.3acI]P0K=Df;0g.mKI15>74$iT#Z7X\4[Y9b$DDsI@[OJ1kcNff,BlhKYD^E%ffF@k=6D*dbW;%E6LS*2J.Co"[Z'Y/6!q(c?29aOi.lcH87pA5Y%<buElI>FZpi;G)8lkc)[ZD;V:Be-g#*bM>pPB32a-<K?V4D-%>cg;T#B\HXTgcZl0!bmZDb-KY52#Pm16lYo1.^7TVn\5Dn$`7tkZ5mg#EiusWFdp)60P6DPk1;tfs3O[e(sqLcrg1lI^d5g=Lf;u%%b)kR:+qcj/mP\q+OHi!_,'m8<;Cl[0@H=]DB"00R=$=:PU3Lml#0te#&bcXDu^NFB8a:mL0B2q+X.kOn@JP_<N]Bl#B9'Bf-0]X%Zenb",Woc.Cf&C4'Sd\O8W.;+oF/<ZFLj&X[HRp?qeNQV\%rVBX<6";1(.=&23FGGip(l"X$Y%9dROec\CSVYT'T%jW"YZtdlNFB%A2[mfkFp\+flIG^B_H4]N<(Ph*nGj!7S^!#OJ,<Jk=cAYT@>;>TD(P0C+UP$.[RL?B104J`b*!b&#:gC\pU^N`id$@JtUO-HT,ni%h7oYMKrLi(Mr8@G4I6LLb6Ojo_Rt?_)):Q,^rkZq^_tlQJpK9soon3SK<VD):`DM,(Oi+7q[im(I6-K\eYZ]CN[D$f(m8R#SqcI4%Yc];'pBK:hS<bI!pXM0]j`>8pf]Zs(i4_^TjleO93U5nKeu6j?CiRm3[cm\*Z^/>Sk%rm<54(FGgFeLIX;C8i2`Tc)Ea/"^juT@X%D<:0.C+VSp[(=S6ZYa%l3qlb8nE\Zs%(L6'\YdZ9)IddPcY=DjET0qV6[15F[:rM+f;V*:;Pb:r.bR+F4*jrrEb1CbMK^;LDa0j9%-8RnpO)/:Xiu7ftp-RILV5lbBr?E^@U+lnl;Tm@Oa;*C<(Y4g],uU+B'X1f=12TL;ppl\LEfDSR5Mb,LF0.%*[O`n5bU/OqmCIN>%@cK6>G&9rj/K[.M<d4Jpb*.h6l[tUR[<e36<\B?lSGE*Dfuh^KR[;bhq!bb>oX94\1Uju'rql0!PKCei>KPsDq<;F1iPkH=XD@3A%+8t$lLLs-#B9cPFJj);qi9T(-oC4/'+(em-?dnH2`j9'>f/%W/hlUPS+29GVL\Z5p])=XqpB"]'q<NcU=.eL<Om[Vj0!g/5)?.58%^/AP=YV;&L5@/Pp^Kf6c`@(G,2Dr*.T3d"8T-'fVoZ?Ofh4^Q=Nt*mjHS\_d>K0`NW3qmS8QG"B9(9#GRmH-d^:qV=eFr(5Y7(-`%dpJ]S+`FP6r0@$9dE6:+d/&0'oD7L2^[65gq0)Z#ba@74]N&<7X8Sq,e])XpGl?uEF`qDEj.W9T?MM$YojHn[f(Jt4fr^T`one`g%%oZ3Io&27(cQmGjet+pa>7]So(n]-nakqToPoitsg%L?ZNI@+=qbD#V;]EohKsdbsI8%oFDn][chWsLsnfHZ$duBJs+&qH;Au9Rn%9:+F)UT+%mD0,^<-YgB=2>U(Oi-(,5l'K)IenQ4[QAntD:L3YP0J.H,hS)'S5KQ*[gXoi(0sR=(oZbu`93Z1U:U]FYD]\=aI'>hR%goY*/4o>(6[h/Y;el.V8cLBW1p9Sga?e5[^S,1FjS\69&I[N4RbWU6cZF#%a0:mT?RW4Y%pNI*aoq7oPqsWXY(GCtFCUK$5Sl"sr%b51@tB>r-N9sur;lP)OaV72'A;eQ!`p!1R`Q,>8!b:g&c9W.Ad]^AnH_<PA"q9eo$nYj2$o'OXYh;jp!NKj2&rRP:uDglGE,QB<u%2Y,GcQ/aDsYLRqFZR;(,]T5==kuTNOk5Ea)Bg$aR[';3dGLo80[Ie9VrbC7`V5Lf*;]jN?`kfJpkEY>Er0q-in)V]e80qo71POn3%pA(%cEpLRfR&t0OP>>Q8Yg2M&Xqi+.S5([X^A44F\DfY^)!?7B*[/NUI)NL^SV<5Br,#f:nk7</M`38;8ccAaF33[WO"8>?7pCbj%#BK&Y3U77Ac941n#kmF_N8<R3e,9+(iq@(8q=*K\3k=ltH6`7Lr6opHojR_j14>Ek9J55`Sg9<4nZ/Ia3^HZge/fl8rO&3'jrV9.%g5fi0,opu.8\34X<79MUT-m]H-U/nY1FN?iHnop),hLUR*$q5K5Ij?L.uL1a`lc3$jQ??-bN/A%j[!qMq!59Io@`\ijPEaZ-M]Ds%?Vg+eZ^8eOVb;rij#MH>q<D]XQTX(c0U&]"2m8G.oe4e92l0%!a`j(IDJ>CIDdGNI:Ts=2P+U(%8'.h'PLF(9:&.*G3kMhm]Iire%jP??r4BYd3q__M;9(++AAhLeECQIQJl/\FCT:RKM*)+[qbfid7gqJ%s]sRUbQqgXo5>N4'rp$j'#DK/1C$WsbMeVp)IURPFV>+JF%D;Kb)rN,S`lh'?,am&HCVjHQ<hT*>-o_sX/8(0u]"*=;as/J'W\orN\rRRY)Hs"]j:LB\?0;ku\2"UD*St+*>V?[fIardP)a6k"n%;O`/QcV0s3*mDir:N'k]F&s/6WDi]iN)4HK)/Du!c+!ql3qN.<lLiB-P:uB:[LQXabre3JG%UG$m[hWBIs>PMS:,[GRX%!$3'[#^%.o4Lda*qSH\2c.bI$$(s9[1is:H!-(WcRJb&#PDZ?9ag,[!D7Nl-o(f"(V#cQNpR^Fl@oGiUZ;e[?p"9K?Yu&s5:Fk:H^[>]!*6G%4K:SjE04J[IIL\@r:kiX1@tL]otei+#Buf@o`sU4DL+4O>(8:b4$33!E.<&156#%l*;[WW]=,F1qtP,JD0Eh,5+UNCI<@VunFF]\%m&?1t2Z%[/p1F"srpK)gp.N]&rGq`0Gd`!j.Ej*E^,\-%Q[L`XSh$&g9P8ZoDWP!5T6ll.?^R:QgU5@7c5jR./'a^14aJmXma^aU%S8[K4\XUB\5?HXO8C,gbM\ku+eVhq).Th-UDk;GPc`b&dr@l"VZ=M8L*M$g*O$B^/S\N5tPik9]D\)!6mC,a[L&J^.q:aZ2VaURI%f:F6(db!?F"l$@b(7onnCCAlYX)Aa`Lak$I'i4!.5()iU$eZ?XrIt0(@5$+g?;<0!DZlKIjisX^7;%+"D=QkgC3jmolW//u3.7-!%I.Lh=@e"Lgq/S4!G"/ehIa,LU_qD/q9+TKmmq3]q+1JsJI/;X2Hh^i/#Tg^K/,9_5Q@_mC8S%\en1OJ*rPMh'o)7"rim#Lil'<rg%<hE/p/T#noY*TV?D<7*:%c10Nr9<M5d[(%p]i:IbEMd=i/R6S;4H_dQLQ<LS9(*j==*J\GN\].Q7rLU5X%/T(CAUlelL#iR>s,_l%V.S>F;U.mL4gfb6ocj&aIpG[;>9?i0o7r6Ve6Vq32H@M;B;CkPhB/Q\\Z:,Sfkm-h8\[Ap\4E7\5CS^f?bUu\cG(diQ`"2ha31HG%PH/7R4(Bj\et7Fq5$Fqbj`dn8Hs.j^[$JHJJ%@BN(=jQHlLiAln^R,RN#/n^)<:X,lb^/XV(AB4o8;57L&IuR+V#<T`KSci>I!?1%#NBmJOlAuLQ:19=n[Y1gRTl-Lao%<,.rFJ2bKWh$jdV%i?'u-s*Vji-AmR',SJIK-/q-ijf&tZMf\(MC5'da2WA"--XuUoMA5(7:%bI,S@o>tKTc@#/*C"dt+n3P;-hEIm,<V<#"/_rRk=l+igD=)4Yc<@E<Nu"iklGg'B5'lGF%j,[O[9`=u\\5>SHto:ES6joNq1ZK[%eU'C@4T&U@NjkD3+b$lsl/`lIHqiHXfh1M&;pBp'*#r7oO.SWi].Z*%9_[AslCj\oq<X"uF7`.P13e*2D9SQ;]iWstO1ilU"2]9V%nY;A)\[SbC<d(@(7'iKQY.P3]b:C-0-X0NUWt/P!9<74;m`t+KepMW5D!U-\CA-Z+r+aJ8/fkr>1Y1T!RpU2sO)Hh$O+$c?io@5o%mlis-4ajs<AF3fKn]@JSRsB%"rnun%ndA*m4kb<e=aRGsol9Bgjhnd>bBF25qeP:uH1#Ar[<_LgmBH0Oktua+po2%"B^9B/m!I'E%O*6k^XZL:sg$-@inl`D?='e[OqKTKPr:dbpmHiSsoo#;tlh)q&rp@`'j1?r`hQ(s2j(6oBCjashS_5Dm1.tQPS*@hGC3*\KYAKl^%C+hKKYBJ7$*k\Ib\"'52lILlgFF*95`U3M&q=DGep@@!BDL99L\@DM66ZRT:pTX.1BE$m`F_>jmf%W1nmU#?e*S%1%ad'gm]2m)Q%[(Eel8@.Z3SBW&?IU--Y4?'p>S'SR(.sK=sghs;Y00IJ9lodCV\[Ju]\G0Y(p%utqhA:+>nm\jV%puCA1J9ArcYbt]\31AR?7m52%YJ,DTmaM!TPJHpK?KQ#"$Z>(nrf^!c0f?Rm3ktZ5s7ZBhQ\._h4?lrkD/:8`^!=`P0,pt6_^4L.p2JjEIXcTNbo@c?*e2g'8g!E$%*c6<\jO*khqP0ghgNW80o%'EnhL#*mIXG;q<-so.G[5g\mZaSU*I/%!;mW[1QgD\TL#lh)jJi"8S=I47:JV=QY@!eP#BR(EGF)+.%:-TaNQHt`C+-t4-Z_rl1N`R!Vc>ICK=0E]Xc=^I%]RRK_qVCDB=0F,eX*<aXV^LL%i-+MGr-E8XbJiJ\WAuh_Z$pcmqVn&-4+0u:%?JBp=5QCN?c-atVlC49TK?W)HcOZPT>9@3Z^&@_4]'kf2meYb^mJbRYB9-(cmg@g-qsVLHp#5e7lK6Rmm&-nl%uX4=aUalI\T],Z%>a<o)-9nBjVIi&q*j/arI/W>Ps't:EmsHm=HfidSo%iu:SFc7CAbu)cmE<0HiEU!Ogb+"]2#$:-2iH\`o;D>jN;m;Sl@]-/g%g@%%mb.-0?f*qoFgZO9I!g(.4[6Z\4M3_s\;.K`WS,L0<P6YB?LIVlqpEZTm&Q(BaVN1Z0*^PH_[;Er]\<__S#[pglM9&Up!LaJqXr\;%1NfIgg:K@+S\)PFX-SpXl;_isp3=,eI[e*Q<-%,V`RWbEf.6<2`P[+e5/5ajRCt8O+-m7@au=ZCm_$)Xp?m<Dh79S8.Jrq]gTTE1%gU[Xtdr,S/KkHHB$\_Ask='B>_4*)qc\i=Qbd-c7oZ0VU8hZd:Mph"Cg>fIqNb6GSVjF%!V5<72WS+KCk;DSk`L];"8ZHl/H'\GS%?FbIIlrFp8YJ's?C[/\uo[POr9%KjDT,.Cr`@_%5Rdp"*[[?4'#:7;h?C(QDD5X),ZVNHgM$+9J&O_d4hW:fGFJb>=g<f-ZMK]BV%QV6r\s0;htZU=nlr,9D;4^ZBto>,abr?.Oad1J-5p59CCEHCT>d;_.(OnQKXIP7=sZOaBA8OViQNbVkeF`9=8j/nlqZV%B>!!DHS%Y/gN9YSVGCG2#q7>oTb6UNYH1@X2g44pc*NMsY*EC%U0h_Zf8L7U<r(b;$5?FrOD5KO5#u[G)f9)SQm87W@U![m;`GeM5!k0nK4)%`3@6-0ad_Vr2+87dNm*8Rl#nGep)p!%r6OYpJO.OcI9j40bIr;pk9NXT6]J[MMYT#LF"-`nL-]P2THVJ4,I,IccH<H**]NB7,I*8%hi[cqQZWEp_VqMn#4!LsGDk9^X_6mDok\_nF]reL]![u32,Q$`Tl+YW%lf0Ni.1(.R7aVEfRMJ^N?,c;]*PRbF2;5$03X]fbRH<V%2S/Sg@-e=dq,1d6@!"\ECM+ACb@#k`L,tcN#,2'+<-[2:]!M5qQ)?jKq8I/+Ecge&kho%Nf+r-FTl3d7.=6?7gC@bPDH`ABj<3RW%X4"IC5qC3$B.rCBV,SRRr2Wf-CJomQ\(/P3>gHAA=+5#DruP-#6=,!J4"(h:R9Q+1fPEtb^!&?cW!Dc(mqq@)ahdV(c6kC-X(Vk;%rD"_,LISi"bu-:>JHC1$]%5YZ/uT1`mV$U?]qa2*T2TA^XaQ7OC>I)s,!;?JU)EC#]dFETM:DjG7Z%ElHI8k.\(5I-4>D@tJ&pmk%,h0r407koe@lPJP$;IUVcf;N'XPs%)ZU>!<%e2A7L4khl^UO's%m*7UMBS?15c*2>UOaVLG&?9<]5qOE"q4*3(k_q*SXp*@#jQRf%NF*(=DX3"WU7^bqqAFf(B9CEuiS9A['0_)U8-G6cL@+.4>!X[j]4X6AU]5',$9)-<ekQ3),OE+'fX/r)=5[[ir9HmX*P;aaR.bCh%fu2geOhl.GK6Z1,m^2amYHo(!$R)G24KV@h(kG3L9KK^+c:5eM@5m#'L\?Ql*]YUDGEDKje*VNLcf",9j`(]oFWpnc[MJg#rN\&8%OR!=J\;,SN]lDJ]WMemFRn[J!*TBR`l%sB4As<AQ@2?\66kcmMYO-HG*M`</@0A/EMMjfCiC;R,*'/,tWHceZR:Ki%it.ZZ5LKo'%>+i,Z'9lP0FnXC5+khk+c_C+rc8/?[T-`5@&\b6<n]h?O<5A%nYE?'9\:6BDE-7B(>a34GIW:7oibCU`[CkAN8us9^S[D21\>8Pr%)lYupB/1=-V-chs=24?3(&=>9rFtG];aph,ep-d&m:s>imnFfI^3HDULpC$DZ7r+>82&E$+),P?g5c[2fbbTUh<.0f^+]8lPnglH%d^sDN8tr""M63\bIQ:M5Gtn@*%k9.kVaj@+=EYtd^m10Z<0I52=)G2c%?6q78en'[-\MQolH2_d]=tLNr'j(1gTdi_@?>AqK3[Al%IZjnrLYe'fn<<>VAbtq*Ncq3PC.J#3b4GR4/dJ#n]"XVQ(9R"Gl>jfFHo(+7/gA-BpKXqBT*61o*;7(+7#a!Td4Wgho\:tZOO$AT%!(,7+L6qUD&l&)OJZ$P;`@k2;ru*%pqlTUo0_&q*rCJXTDLcm<kqXQGcu:'BaUuTQp\T6#gLsLQJ)afs,?'*@(26iRDB`Y\GjCGh%7/bM(ZWYeVgpHAb11Am+g2n?QZI>rf.UcLeRP7L2a\4cgWl-4nFjndC*,7;m>,1K4:mH3@BdZg$1"3#_=UBPYYQZme:>0`&+.4Q?%`V*R/Zcodld'i-PkQia--e#M<gBgg4Bi?L!&o!M4Cs4@tg+l4>:FYP)4e^Ya.?(Vf9O_&FTZNF8-Bon,(8)s">rQUE3dl'AGu!'l%BJS%kNGTPrQKusal-KoVS!IhLBdp#C26!tER0(Qs\.o[:Zj24YK@_GdROL\g85H&iUSZs.0rJHX*L[rmBcRs\Agu]e&UG35YAe1X%FBC!NfJJrX:_Q"BZP8i24cE-/DcD&H7M?V@Lad/oYX&f;Stn&S[<P=Y[cobcf/59/[Ot77cIS\1ZjCdfD9fR(4c1l2ZK[e"[V5=T%Stsf_UaOPL92R>D`KWm5WEbif-8!61%k.P1DE-.AAD6Qm,sk/8_TKg-$B_d].Hj8P1k;O3>Imi_C_A!C8=N@]OQNKs\t2P^#or2T%<]G^GeBPo<S)H,!LPil'D$esR/s`Xg:%QHWQ6]a!Toa#+>N0UdTu+^P0M]t>*/@q&H%^bZ8%FZ/3+jNNk[`(=)qX&q6A8(1lHl!;%>B='gl-_TF<o\'(Sai1:E"E0RJJCd.6UQ`&F1S_66^\C.ZKYeh+u%"#7,UfO^e//l0Y1sE*Ler5dO)j3m@GY)BX6jK!Q;-8,;#Fd%!3TP9&k+cRa%8)>G1m.j&oK`i(o"4B8"6euBgd#U\IL9ZnBeuH/!!M4)@l.lAl>La-G!6I0MON->'V%\$0CD%:MQ`&J1([S,'9Os%/=ZJJcDO@IF:4F1YaM@-i$Nc=V[j)56K35a77WBIV?rt/_Jf\"(#>.l;!\?=r^mcJ+BiOL+Xu,u!-F\_)@<U(<2;)i?AXn8a+Xt3%Vj7Is=p".?;`p6>HN_jJ7PJ4qI$1XdkL5-]V<t:9'T+S5fT@M45,)&7n0-N3"Rl]q/;F^("0rrU&.QD]Ta_Cj2B1;TcY]iN\@U'F%LjD\IYd07maYQ*!9s-7h.1*=cXFp4<<u!@5FQhqb"fgO99s0I]&O!OTb<q,F&jS/1=bP26+!%k.6;=2,1i.'($`D/lS<]`I*h!B/%//rdZ#ssHhi%-/dH+3kTShb[3IA:k[I7X<r"qX3I11u<UHA"1C\9^,?Ng3Fq8a#Pq:!t7Y9CrM>cBW9,2c,`h<auLjR[S&e;05$o%iesX#1P)T?1RWohN;uRj2]Kt82gI5CRL$ACh..r`QjA<;RBggJ`$6"JYQa7N'.&/UmUFY^7H=AAQ[qI8XYB:65&PImHjWtk>9Q*h%P0R+=KK+](2A$&N=UED[n-0=b/eKb0Mll>bFf$$s6Vi?=_E'ekUkF.oDZ["jfSdkTa28#a&=s^>*<f^^q@LCd8HRp'cqdo/8TU@L%4)#<qfFY?eM%8,[6:bX>:(8FB@[V<jba/T/#Y?`"-!'@D?.bd$b^d/:U(P6O!AU%!k$,DgJ]b<0@I`rFl8j0Ti?f(X'I,IUQV/6-%pcM?]-j.LUoSicfUWH);+:Be;fK!,k49K3BW&]u3Ph8e:7`r)H-ltsSL.T#p9lpV&P\;Xn&sa\TD)bi8jA&#WYk\C)K?+>74?(Y_%ph>CfF>l=_!moqP&;cVY"X.@/BHlk5VogT_^r,@RKZY?39"[I[i^aP';J>?EMC18)0@=q8&DT%:@fM6c/jfL,pfO?rZK70=#kgO)%L_UJ8Fb#IK+:'auN[37@&JLA$M`<7IN5o&BEh*5FdKGK%UE^b"YscrXaFhDogr/q9#V?NO<Y<`g/3JhM]L,R72::(_Mn4>+@Z[p9%_-fY`M2MLtFSZad(1JsU."MHXd:M??$0rmI"UL.+:dE6X&0$jdVLhL0_H&31@/&5.rTk:-.GBM(V6V<qd`0:Q-;uRfPbQ:8U#=g:%TF(@*7J967[ram-=U$4!BbAO=S4WM:BX-3qD90..Yrn8>8C2l0$PCgk6#'N!<cgmrk?9hM&1?IPO=H*=iSBmN6rOtX-5aZ&pi:@!%T&C7!&Yl0DR$EI@D3JQX7dF_J*^YCNV-oM.38lsE&>Tt;0K*N`'+lF7XN+5CKfZ[GXPgW?<+*O5,Y^"UnI/.:KOS'b4N7G?0hl9h%"Lf_nAdfi)E*V<:Ws&W!5Xn%u$L8u`#7gGe@)``Z%7u]j0S-)[n<-eF832k1l;45SXAFM#&jaG@TSp[PM5XH4_309M9E''F(t,E/%XcR6^Oecc&R8:2YkZN"X\eBY!+>U!Rm?r3Q/;opV@+GB)-+-'QMXEe9,g?_#T69h+'!'Ku!f8aaF:`<Dcp@nAK7oQ.Cm)_>l3C/s%Duk,3_)W6TQ`u_B`L7;_"(EZ2:I4<STp;%Ap::<O)A#3'`+6[A4U$cu+bn]KKj727nR?St#jDXN']`mrIb'ejR1ocK`cUEtNWr=C%_M$$-$iNc)4@4!p6Hd.[9dn8:D2#O1(G4>K72_T&>JQa8F\7cU_5a0&dj4cUE9<;b,$FB-/JseQ[;u^"6&6;>F@M6Q8mj'PEt=E\%9FV-cGWmQ^,lBFP(Z;Es4chS]^a)2$8:Y8TKmP/_$SiKNI8D!&Z$<N+"Ag3YE6EmPX&uW7,,Clr)n8g-5-8ruBIP4hi_BZ5-Me;p%GAO5$,WiRabRhQ)69s8'"V"Y]b%_QM,^O+pdYLMW,V0gpUqu[8ed^Cn:>'-Nh.0raiJ>Q7ahg.@!KDeq/d-9&0!1-*!LQ%b6rLf*%.jpW03V3l<jYJqJOuR8A>\Ku3'?i6,i##-Z"A"dk_OkZn=5SNQJ1rUjfNQ1S+X"M2Gl'6p?Sk=qaD/+ol8Cr;c-ii4>QD-pi"hUb%!X.kB+&>GD7nXq@ad+'t1*pfY9lqq&=(2>>n5,k9,,CrfA/b`7`%kR,=EO*BC')OZ$AWH_I@=OhSi/)26-p`BEk,RSK;M)ELZNC%%dCh)El[T8]AigZ*-2\$*K@nD$RO7c"i?W]nd4-8S\/(_I1mq<&1mp6m"WN4j'9K.)hQpWT,>.<kDCAgP0J:0)j*F0C^QL:r&uT+f%J>qX8!`rVSX[>b>%Ed6jr\fUTf7/V3#cr'_Ti5?2`0DIlct3a/LJPGBJDNPb`B5RLV#rLu_k[MP%esfQ[gDG;(@+Oc)-C^Q-:SWh%,Z4X6#rRMXE>&@9-qf;SA?GoH<A)cSSA#+HeTMFk_6J-@-0u1,[GiI:CuK+O@k?\RZ1/#0,qQW6DK9.!:b\/Z[KqY7-<!T)-&D3k%0O*46*[>E9o(ieI6!5n\B]0=aAh`%>O:*2+.Jt9WK'%u/!)L]tN"StP=^TXU@'`!0baP1FMptq5UedS?(0Unu$c75$!%'W]MNA]X%#A)`rd,_/<jr;:j-C=q["Bm?XZ5&3UJkJ-/a\0R!T]IYb#_NEi9N$ne;QIWW(WiO)V4bMcBE^+d-"%:*?sTOEOg=#YCi'4GJjE=,%-u:U%e#l#$UTeha3J%u?^+25gl7YK)SL&+gL5;qh8-Fsh^k%R]6"C6*/f3e5",P'b/'6p)\e'YY,9kGT/CH6#M,<[g.#(%sF-`l'%@Zm<km_MF%(-*8dZF.ZtJ`MY7=sg>9CcsV_Bab'IoQ[ok<P8T`=I`g1@TD*I)II;760sgIT<2\%[SLd9_:3'FVA"X/Q:5U^J<*=I%arjTt=@gqp(1h91+[$#^6$/$NX#0^Y+eT)S+5#)?JDCEu'XW6*Z91:3k-T-S:bN95.$?:[XLQ@\D/(CJnY%t',p<[S!3;t4p)PhO%1`<O$OCSG--BcZf>W)Xe5SUOZe,kh*5q3Hhl"D7jk\+hc"><(Th5&DdK-s>G*"%fKN@q=H!+uY+JR#<P(`(FiF*VRE+DbG3L7o04%Um@R)1bCm9[N7+Op%5%4^lg8h3,"Z191q#kD)%aW6;J2TYUmiDL)!$_5R<J'#\@pUg+n=,&i3o]Jrpre>+lfUN(&ChP#_m)ZH%8)%>"JKE6OT`t[1Q8&32M'Lk-JKKRcos7fHfg:[OoQV/1\N#Bnpjdg7X+U&u(TCCk>duekPOR6'Gk9I:J/N"rT7\Ul0\>G_8CRl&H#R%--V96gT1[QLb>o7*g#0E6:*DlOI85cdUk"5Tq.:&BS&.gd]S8d9"(_9F_(&>&53=`Il!=\cpYcgp'#[`:14h5!f/G_bm'+&^lHOf%3<9JAo`NiSVWB-8.NtmkbW8,/Sh^SfM;/Z2aO#Z3)^_P<Y"T3^(;)ILM1?QZL67)GkY9G.OGH609"+!UrR$@&@phM>gRP\>#7a-1%b741U3=V4*%7C!%g!PGqZTYuNLJX/e%O;p@*/%O.OpZf0EjVs0A:<H[:dtm'VCk^hAs+8=+M>VskUu'2^dC.X=51r987t1JBsW[f%1l[<TaheM2HD[NY8AU9n688(c$;k+roRJYn)oZ3X\+Oc9W$s:?-oa$hZp6SbkRs(((F05D/lQN`dK0)REI^G&=)4iL"pl+b9Nt;b%Jo8Ga't^2%o<a0EjFIIZ`c'H;SI5Y&boXeM9</+H`'"BH_Ifp-\YC$G;FrSWTli_`,^O!9%>n7OZ.9%bK$/7*5`jqb8PiA_;V;S<%:;@GtUu;^_BX-2`b>PfW>0gM>BnZu22IHNZ-IP".XiLbqChf<D6JGkZM+L#'@64ILPcbdq4jq5<ASNtq2b+,VH'/%-ki[0nrfTYg%1V?Ro=-,:j*&(9*Q.!Xu"OPB>/fG*Q!*gKN0V`2X\.]:1Nkcgb'\JOB=Gf]MK%Z<dU'3!jAFBd9it1L@aY!l7l6sG)U/kA78-U%2%M#qrFlWVrgp^$U+o4lD.<-oGjfJ9h'6%QCV?OJ-*LbT%9iD@R&!u"MfEp\U(gnTFBncj^l7!f2m4Ur:&1jh%oRfjkW>2UoQjri?o%E&AW?U'quuFP,q3?t7%eR;meI6L?-A_Eo=1dVRgG@/)E@6Kgbg2[!j9L<BngUT4PP$"p#@bn)3a5SA6-)@]s]A3l.PM(F;;6nHoQ%+:8.d@CQQ]#-m/N&61'3@5GkLSnDc2QZN9bd:9(6!)-$EDel3'Jr.&m"hDuk@1=KtJ6e'ES>[)gR)S-@5QZ8%CPOaaKk`ks6#n$o%1nj"LU(=UAP,2E,3!9*;brqsTK:U9:a<X%d5bnQFgOO=?449fi\TZZ=A`1oep'ecc/[V4eJX#ISh)9t18&@SX]Bul*c+ZY#!Z!!3%Sf6#=oj\Dn&^r?W2XuA#dhBj3-`(N1F<MJ:fME!USetf9SmK<H[jm%HQWZMZC<s.O&nX2_8q9_rG7j4?N';3J)17@H;J;.LE@G4-%ng+4ol4<uO%DYf)&DmK&*FZCYbojH(#,0\TbsNE]!&pXVR4U]h!p%/mB!X<c,6d^$&.0iTRVBPf:[k?f.;00,++hoB.>F:.]hd'9%[4gB(d"9b*%WE!ql.K@^<[XUX&E+U-2XL!dNDjMtD6<TF*fFeL"NcDP%mc8)iiJ6HM1k@VPl4k\JjG*3=d"O,9e\?=\tWH3$8BK)%2kAc@5WMUr5lt&t2;0?-F<71^+u9Ah(Waja-2[IRFt+pNd8?T3a?bK<JlCQm69e-\9$8'C`DSpoN5@?cOq>%]BLb8l+dhUOB%r=R%m`BH$OsG7ter$s@@LFMr!G^;p#gHFd^m8Jt)B;Hfrkr]YAMQRp8]iG\<"GQ3>I'sRe'k.DmZoaV11kJ=m,Z*QEK-"'H81P!a\I#\%b$iGRW#j-9SI&^HX>+[X@`&b/8Qar*b\e7;Nm^gk*CCbcpK:XB+Q$'Ad#$g=#q=<]kL%hBc7(dQKW'j1Bs8C/(Le1spk=mr&EQ\q%j!<,oPCd;m:%[(%:'F62gGdg>k;Y_HW+r-ZHQ#0YY[5n.Uimo-nA[QF7!IgI*),!gBl^S\`%n12!:)q:f=ko%*Pl7==W(E:7p(;%%>(@U<:&qM:"Wa$l^QpWlfT.a"kKfMfqlp<c"K:'k.q.P^[4PF^9^N1=OkCG*mYt]QYG]%O_IDNL`=K4T[JL+=(h>si@(r<:i=J^1%,T?_,nIt=<fGapB"?"ld^!3p;6d5TR1bHo&i1)i?N'<Y3!ZU>CW%QH\$!Z?8!QHiC&/\e(%U?o>Uc`n/UgPFT!nsK$=\=l[!`Y6:%73L#43Puua?La6b?Q75)\02$,Q>V6@e7(Ih0ImD+!!-/Crt^B$.>C$(_KOU3AE%$[Tn$@q<:&0E^^S9'R5J#2apu6G_E_:?L#'f2%6Yu)pUs22!DfaCk6c,DE3Z8nAMlFt[HArSK6^%n&C7b&VP#bs:k$Z'GNBkk<rl3O&Fl.,7f;7Y[&6&%\`GNt(QQs5;1.l^PiR2\>%,d7h?,A[FVACW2ai#u"%'2U1gaj?kLc4+pt6(KhuJL,o!T^uUtKV_<8Zb^_>Z9(j5b-i4FG'P4Igt3GP,%`W(D,*D&CVr'V1m?Lb%0HGb'8A+"17lu0Nj-J0&0h@B5.MONSEA,+I&)IN[E=&%*\O%7N/:GDI)2&q5eZnk9p'ghTaYlZN1lS%Z5VTi1n.@RX\4kqjEbe2A%_8jcSimuSoDZn7IO\(+m:@h!jn.2VRA6p\C\UhN&lNRU*4UqDR58=3=/B%!EAk;8'5_cln`bB.d+$jm_3p!;5W)jH[J7+EJh^^F%%dKc1:j*Gg[/@`=:k#AQ^aNA2U35*BZ@NoL[D3kM<i7`%7-m41iSX0WHVu77GIaLdsT,+uUeteuh+'fl\ZQ&f$/YJHN!Jur@Z9uUh%7S@DW@1ge@*a=]SmB6TH'*&66mm+0$`kepem'u+lKr:323<_^\%1*C84i*kH5S,!rjJ9U(#mdbh)+Lp25f/9VX&o]pOV3=RZ?[9T%R]WUpZ[EKJS'k9i@@Ab+S`7_%K^$>"_EkXNH;,#.;/SlNH7\e\+U[BoZ*nRjfI[+ZWVn`8_bhRa((d$Q\f:hh]+/YM*(UJ..M5`o%S(r[fkf?I.Ee]U67SD.O6/=(%;&,0G9h<eWG_jpD_*\eQXJO%U);=9a?nm0uXZ3\Y>mbQL8M,RgKaq7"q]stRda`193WjP:+d=>X%!QdcdFcVOU5=eo@M-l&NiJl+p11nUL>@</@&]G0W$!)#^>8GC6%Br`H%rp?s$Bhp[?4EQZ(QG2ERkTP@!nT?a@#@[QLbioL'g(Y>%[_<&I4VlfP/:NKU%HU\Q>,nj$VQe'l]=/p'$?d+.g=(d\Jo=Z*6:#sN'99sBd/n(clokP&XOh,]#q1u(_,md]2[(3<9l(^^$=6+n%>EbK&1)43e!dY<QP[Trm6qA*6]Po1uPeSo$!EfI*l6RN6Cn"8j,g6/m`b/(<M_T79dU<D,O4f*s##l5O36Hmca`=5"F<#Xg,8p^3%_Bd7[MbDu)P?UTg;cDDS#N_b`&]Q7$']t/VC'KZ62%`P?4I/,TNUVt]Td1[Cc"t=ZZt=/3_+J/Za[J\rED3lu4KR)]R^:Pq=Bac_%N=GO4k`6qFYRF)_GuMfS&C@cj7C;7'$POUic;ADLBCXR4PT%MLBT<6G_,9KLSJ[m;^ntM].75f<6)j#]*!B_R#epG;i@%5jC070L%PT#h4hI.[OfcW`1!;R,0]+A>6A:l.nAs6\=Bi%=d[1+Vs)I5be_e_acO/[n\7"l;9?48D$fs#_efHO'9@_%;,-,ShcR(K7BC5YZS%'5^&EQd@pj80],3ckVYAj<,F5RN*L#]K84'P[TJ7nIm_,#kNnj?C0g'U.rm8,E5eGUA84r0j1X>4[?Uagp3WE\#S']!gC*-l;M00%1=-#U3PJK5**d85!,r9JjF!ZTR@K\`pL%E)BHg>]4sHG#c.l`1N*\!$WlHOjqXS()\)E=nJfR2a@@>@U8?2b_*6H6Q5mSaE[Ppg=%C$4Mn^a5G6k;l?4eLj51)d8\bP77=t4"6*02Y)iDWJ(<^Lqrr2$,)<>*:L=RA8_PCm$`qE_D'nlJSo(&Fr8]e#Zl])%;&Huci[nj%6`D;559X1NYXgtZN?JnQM_s[f&KWG\c$jWS^mrTSEX2gffPHV8k/&J,KTK^_)U9M@@!,f>D<EEk&<jmp..fYI*Jl$;'g`m6QIsRq%;1nA28?&LP3X$(T,Zr@/e$BCbU$N,g'4Z0:GV@g.OYmmAJWKmr*qjG0>2YMX%5QAu"_d)Lin,B=6,+15>On6'$c:oGjt.]Pbs\jg%)7_1CAu==3UM+`X4*pMR,RpdT+,uu]FRVeT-Gs[lZ4ac&J/iP*_$N`8Sp`+C`CXpdp"2Hg1l"mS#Qn'eG=N`!iW;4eoN8Fd`q`"p%KJ<rP4A_2n__(95'2Xj",(r^bPF.0oO=1.i!s4c?YLt>2s.8<DQFjlid5UrLoZ`+\hemc4jbOt+Dh(@8*mpa$2*C_3@lmumZK9O/%RP'#0'UQPiEp;?=](FhYd&54U779p-GY#B$j0q#BQ<cBq0+O&I[4b9p^*[JDR%u2d-\3A[+Rq&2%CpBp0E,hIN`A,=qZ,m-Z(1qT%&mT^E7T_9KU##K?l4E@E_Tg4U.n&bIE@8X^DIp(ARr^bR.SM!Ff[V#aNt*[k9N&dTEQalMVTk]OXd`bo/)peBMJS?uPXp-iYTVqK%fSbrV*&#@=9#qtleA:[$2LE)M<_!MQ"SkW0;M_0_'OJlZi6G8=QnB<>3.cXt+Fn!:iWL$P!ue?9X3fg/N*\4(.?g+AdGXB71:1s_%"oBXgB=:QnA_B])(ak8uPAIC!*\5.e=m@[A3-J"4BsE\1[-Y*)&EAeEY#\le)NtYlKP*h;qa`k9J.S1AS=I?29/di).40$=>IK6W%_/\4I\I0<`ki).qb7\YW!m@9X)hB'caJn>`Xr%'Z+KkF2l4kN^fk/G_i:UKRj(r""LStShL-)a#Lt2J)7U_=r2K\?q+MnQuMQN$]%-Gn/J3_("6b%rB1_pCg#D$IO#%bZBXk%_)i6ng_!_1fda-#&;JlZ83#L'pq,8t.NNBdt,%gk6XUp"4O$JM>&LI)Bg:Th]oUPiYAb%(!<E4\tTY4iW$/fbLQ-U[`M*,0#F&E^S3*me9f0[-TmaU'6MBKl#7+A9R(.dC2ARtO$jG#5XLd@_V6u!Qso]='4/(56mbFc>-;VP%kUqDD&.k4a/b\[be\X:8R\Bk@E?I)IPT4oQ_$Y=^2.Fjne'5QGV\q>XBKcbP=U6$QCk8\'\*[oSJNt4YEcAgk#cfM\?Pb=6A?Ug9%+jI\c59-Z_TIgF!X?q[3X,&eCF->M1Q=^sY^s3u<[VUB+*<#qhg>g7`Ni.ZIDj09ra_D@16'bt9*:YSDrA,K-;;`om/@DO2@1dW1%3Re9h#8]M\gL:7%*2thDR!>;H#N4gOZ2o0VD27XB0]oW5d9oG@S_uhiVAbtnCh^H0i@IUtA-nhB6E&EC$*cKDfO,N1(&#OF5u"5o%FMhF>@TOJb(,R\[8D9(*%dG/>`0W^sLT?s:/eCQal7$0(dQsf9r$odRJ3L,'h@Q`>gB4f%*(pU$_$4d*\#p5(LBZ;hlt=7>8f_$p%=<+r)OD6icD3M-N0eR@21rB@i*")k&g6Q/>#cH<)(9)D?#*Bg%s*:OJ.s]443SBG1@gj^n]]27'DIP%lkIDuk*,=`B'#`!:XT;/)%jJW9>W.)i?(/'-BCC>,)HDKdC@?@c$eqAI^*5mVA!5cT.X=tN^;^<'t/h*q7+N&X<5Z.F.Ge".oXO9!-U/g0Jb0VIoDKNdd*Wa5'%Y8]VX>VI*tcsj%0&dWK,BX+qC`"bO"3t*XF7%!be*]:<llp/Fm3T(H^dU?"9j*"]L.,YhAqA)V6Eu5[o7V&t34eI:XIK&TM1H8ME%@9X_t+`Ofsa'b`bbeUf0_\.N6AdC%D!,6BdVCon3Zu]>h`fUTqB@tT?X+sFm!g2!H%qO]N%NY^&PAp6t.?kS[WJPg%g_$uT,BC1n%&82;K^"E\!PqeE=k"Ulk&ra'5%3:E0*cbkClYJ0`dD?LL+qY$L_qT`]GIF;m?8K$DkmK77bV7gM#jC!`0+p=)dR:O?_f:`48.Hc5%nr7<EKEs;<fL!V$BiJX;4B!Tf&uZ#*ZQM>DV`C*-i7K77mXkWUV[/L:9S_XL&Mh8cCLEF81c\NsBNu9-DbF4QD/$%_@LFCAZoY#i%3nL`IZ4@4]F<1h&&TfZ3kp&m_4AfXKJCeaZ!tU(l`RXTb11QYZC';a,Ou3[hS)Rm,I_;R=1*UiMc(lVZ<';7eBHRVR9:LV!W_b0-%?EN3`+/jQZ]24U;_5[P!^TbTYTt#JM495\8.P@5'nl.NEojG*S1'_=#TfBT8+/@*MXOV:>L<4U]m><#t.4dDg"3cki_/[-3B;J(-%RknFD;4=_B,DVD!9^#]BaGA3ZS>%IRHd!SIe>42B4m-i6n6/?&;OQGRQ4BQtRkFl,/dVTCW).jL*p82[9^#VJd`E[Kdh>P@(%MrF%CRg(&hfHY"85`tM2O<!h4R2->3D)d]LJ8OpktO&jMGTfDWIre+1:O;%/#Q[a]#e?#JI3DYTa6W=aVhiCNkPY'BT+*#<O-=on5b:V%dFP:M68bLK_48>Dfk=mZPX?8ON\JAfm)E0pK_uH@$dB*6BV_CJ!Y.`](jl^a#Sns00I1]tL17cJ$nHmJes=Ss71^lHOD2T?PK2Wr%6"hcM"G6DYR2h"iAO`#'JhX#Q?&1n5*8QDH-PFo=anKUO!?bQ&/J#hlFO;R:a/5P%=H"4H1137^88qhZ@;f,ZfjsQ=UEr&g\LS5c%_WeK]Mhut(5$l<g@2!E06:Yh&%K&"fY.Fc!V5k0=;*r7MdDh.)SGiV+=#UbsA?-*qKV@#)2hrF$b_E5j,?-/AeCc3k*/FWN;Q.89%SD7TE@K]S;6X*'*rLCp')%HL;`!R.Dm8?!+#PZ0682u\>%<<dX"-Q/XSh<lp-jA+?iY#[Ca>nrT]*(`C=Nkm'[1KbL<Rg-GF!-gG%>[::MYsk#f.pYdQ7WWO=*F^#JN=h=&[E+,:-kGCoG'(D9SK"X=>p./s9rsjp`F^NK+/]4X&n5k6-Ifjd=?SAN?`+pF#$2,h7Mali%XqIEGMN]>GEX5"1l\%,29Wc;g#N\opc>%4?i92N_)`S=3o&1eR:-))_Yneu(2?Qta/%"7j`IQVGN!r\g$td,-1inq*LdQ/t7.m#(%%pG@7.?pSn-n,YX&k5tLcEc(3c`ne)$Mcp.P*4!ekrK>!9ZfilW3@1kjKM;iL,#,D$e0\6#:_jk)Q#\hO8p!I_Vs`A>+8G!]at5[%Ru!2]jheHe8<klq!:ae`U'TD,9fb4)5m<;@_`BbYN=54-0`.>1IFiX-eDfGCA'*:UD/;VC*;CJV6OuW:,9/HS4&_r`5!#:<c[`Z<%;qL_Oj.p4r_[+FZ3=$gP(aoh\0,S7)*&dA\VNbqN-;L`"`N`XM&]NoS-k=IN=J(24j_;ja6H2r3d7A4aGI%li28WncNf+@o_'#nt%;iS.`%cu16D(n>-0Z@UM&2I[7JdGIi,BJa;7C`J^j>q=!BK7jC-=Pq3:k./=`,L9X$Hk5I+t7k0&5pS,kr:nlaY<"9=Z02.$^%=m%=9Ka5hLXbp[d"Q@aJR58OHKXme&Clo8:np)F-qn1$QVbH2ljo?N*mm;ZsCoZ]0\0:!$J=/e:KK8?0o".ko+eu>s9P"67p_j%u@W:%3S_H)r8k4SdH0p&BL5Q,YWtkNVE%+MCR6@T'WFPeNX)i,6=dI(@nL#P@ABOtHZgWlKgicZc8TpbER\e?ia!cr`PZ\JGjsCrNVm?.%>JMVbFO6<4+qr42k"[OI]5\^Y6GP.LH"3B%c&&UJHYo1J>1[\5<j\\I:]bF;c%3l/=Fqaa=P=qJKK3=-J1Y&ClbT/,-\=\c6Yn=;%G3DBF0[8QCE.&na;)SCpAi%_?Z.\9hK`,d.iNV^fQ8[#4a#Cujbab4)\8q@R)K"-'cAm+2rl*9GQHj,7_6Bad!1FI'W5Xr]rYAO/%`Rt>!X&4ZsJmHsh6o$rGjb:-H>ucocpH`<>h)Kf*;7_,X#AUQp:iK\DY%W>TMfUGskeZiq-El(_MWnu&>C]F#-e1kU+PH^pF.1dY%.8?B1JUSRJYJW+9AdJ\,Ts3,ba_b3?5T(#dF28;2F<dFfhI-mHK0UknF2N.bKNLdLV@I0G+(Va<>M(nVD)"'@-Sc/I!Y5.fa5`U3%pj6g"er)e25<(EFHs:At(?I#%Z6t14A><[Vk?O1,$c5>-Ls'^U$%V/0C)**\FrKPgMR&8SC#+]U%@Lhhrm7H`hrZNV?IF]4K?:M^%?*=8b0Hl'TF"n.//CY?kX=CA*C8JgW/oIFX/,[Yn_H<MN2$H'*XB@7-3#78U+sGSI4fTPNnd1tra[Q[a%d:DX5aTFmc/Y$ZZj</-%8:[!1+05IcCT.!'3P17tq#2BcE:!iNl=a6XFBu<sndH'U^p"eaBbfr!d1^c(>oh2@>V>Vb.u\K-3jQ7^l*fPc(Ig3YHp)$P])O0c%/o1We?>h?o$um7bl1hkEWXS"kdq,TiUWPRrM1\]0;.WS>%Ej`#Q#UQ9@69UM1;n"8*@qh'#/btbj6mm`A`/-2@\Sll6<l,U2Gr(?%M^egk;m%&p,V@^m$dr%;TJFWgiCpCX6"O/R&O%fU.V#50k>O6jb'KRSs*,h(#se\h9S1F&[r`W,(WeQ^+u%\%"T2XdXpnkZd*Q8_%fL'=#qe&a2MsG3uYT0s9"soMTAa#XRoGjoc%c7j7LkILEe#Ze[5Cb?W%AT[Tc*.PS5e&e4foAf;K$-]S%?M=DZ8"-3Uc'*9CcAhF%`fLKa$ALDs/CJ7Kl-*T\P>s`g7)Ik/8&%%1>oR?HfrCp>7U];J_No.&G\kpkJuli?'nTk=#n(s'E3QT</a\9*$@aUrhFo:r6=$(_%#*?oBY#L'D'=Rjf<a+.%aX?)b41`b3cI*+o)-FHW0`[j?Krc9t8i#aQlmeH[UoMd^`thB5F*;6%O\:HG(h&"Oj@)R`VKV72kc([t%T#HC'N3JrXnC&-=KndK4BoEeNIZS5SE2?18dV2XZ$UZN.PcXY!q+[6;_.6tEG5,3Z&g;d;P8+rU=c41eFNU9r8o_!Nb&q*aFPpT,%4qZWmMM@M"DSn8@E(2PPa;ZV-$QBi<Ml"9ABsr8'Ef!uE<B,-TiNR#iTIYl'AQA6E)`E%OnQ_E?^D9?,R(CNB!cmokf372/#6WB.%0^*3q/oK5I9AA_S@jon\(W?Qadjp('NAZ52CS_s'KXAX+e2e;3.l2aJEn$DOM\&82_j/m@!=E&J4?p"/amKJ!CId\E2I3O$cXL*.%$H24%F'+-i]l,;kC)LHT:96dE,-S7E=Ni$0+(^i%l+jD*[/men4<EQ_PE]Zpn1bmPkWi7JEBLCaeaYU:dLK%b<];qDF/`t^"c+u8%d*`Y:i/+bmbR(nQ[cEpZjKP@f.:$?d$2TG]L.?ij!DU$#8o:R2nqJTB->M;Om\t<A<TIa?c?AA;`F7&sU"BSMM8Rar-_)kAFaZI.%D0Wo+K`!9ZeC"g=pbOm*Qn)V1)Jt)DJP]kfM8DA*C]K956.I7BMU:tQ3%W+fm&)@"F*9)R!0PAM)ub-gW5XL?7lC5;Si5fLc)E5<%_,BQ=Q7DMf1Ggd'*ddo5$9s5V<%_]NH4oieTu$d8!Mn^?'6YrnLZFsk\Ed,h/C+e6JpP$+!ZPlG][U8.I=JL$!i6HI@gFISlY*aJ%@Z*oQS$X:__JKcF@a?J10E\9,X<M6>.l?d<PQ<\)_iS85R0V#k@Q\IiKoO0*_2La@U`Cd5S'="+,fs3CR"oo4ZreB5+I4WWRgq>J%?1u<Nmi?<Z_48C3Zu(nG]=BJsp:S50""TeB0l2Q_I>,^*7UCniIX`uEL0DM8Ur`f6=Ad"'?prP%dtm6Cp%npnCg9ttA#NdM7$FS^%#hB;AktE+#D!E>``IKZW3Np"L\Um*Q6#iFgb2p`=(D5A]5$u?>,kC`5ka'&I";foa*DjI!(SR(2=@315f$&k&*u_M^RF#[#@I0Lu%kT[orXTZ(EDeu"TJ.*st3'':;=_CHq_j4KIE)Ec#/4/a@2@aQ.4>6'`,,C0u@<8D4McFhX5c@q]oF,Qa<Eor0U6;pU'F1`sise#P%m:p8qa,1b3DIf-qLeOXj08Bkt-=uFD74o!aLEW(oD1uQX*C(DW"6VL_Y[`m75YVBbaftQ'UFU&ROTUeh,>&7&frq/d)=[6*+lcam%?GdPW+H41NA8jtRN`\,\&TWYD%AIRu1V!L[FH!Gr".pEdMT[KP^+d0](ItcMBJXa<56k2Pm$qLJ3`cMT<HMLPM@1=X[01aiChVjl%<)B7_N?-4D4;<bX]E.7WJ'%nr!Z0bT@Y@&e?p1ZhATMi4;O1FbJFEU+6G<t'D-YTFk$3%m@mo.WK"$E`GFoi=l8cWo;$rtA('i'<%.-G9V&Y\.&"hV[h3*b=aBo"BnX!_re2rh9]nWXf`_/uOBd(kTk+O'2q[U!1GK#s85N-9k+*_j)K_pZG!e9EBH[<>YcbXI%;qDnKM%$b!?.7DqMtc.$0^@p_%lkik%)#jjM/1>T)JQG?=qASJGKQ>%b&KY%!p+".+<)C8QQplMaonI>\'G-h#0[1f&\%[eK4:j+'?d/r\:%b]"K%Nad%eQLeYNles8"d)V!i/a`=c8uoIb-Kl#5#I=/55t4!K=4:0c`?a5nb$d.o%"M5HPBC+`N'@m]X:E1adNL&aAH`SIF67-X%k#6L-f9Knd'2HVFlsN2pQlD>(Z!ht[/O2Wq_nX'bdr^##L3LVqY\Vf=34]e]W]aFuPm$cA[@d`R(:m1um5eZQ,?o2_-eqTNJ"_7j%UU;)'0e]UgD8>@kW$<ss?nHLB".._=>TF0U.)Wh&#8RuP)_D%(^MQFVVr\I]6u'<X3*OgtFg[rrYUt=Y%2WtqNrk8)r.Yfd*ssNK%[YZ_#!]IT_pk`5hp;FbU!,ii&;T$pVPmd-j:57[6Z.quE/_UkNZn)[\6J$J2aUfEq`(slA2Z.gDH5Wi-F9[(Q_eq@[5Cr%agHs:\%`B#$V#0cQbm82(tYcA^$$@()]'14e=k&#l"H^O,!\9ZEJ68()UKK^Y65G67(@7`)M#Da[fm(V";EVNS57iGQK@f=*mn'l:j4.)ZN%YVp8@A2V321d$1Oh)2?;9p8b37W94mS!nRdMlR_[5WW1qURiJ]?3(Ib4K_=MEt\n]^jBs?fdADqBBnt>.&SUBnFI3Yc65CqY@I_a%fI,ID5T,JSgo^ndAd;le=P;b#$:qjrZl4W*R2J@c&aX3'i3mc.8/t0T(Rd&qi,TgXa&P8bY4!SmV;[TQ&7A2NOcU,9_toZOLG_+R%1ffBg\YsTO>H/0-EYIE4*XnU#O/X$qQZd\]_a)D.n@p48&`c@Dn2`23':+go9Zin*hq6WC`be+0p]S0\2VPKefmNjIRk/pf_&+R)%,hnChkPCVCl8;(g-A&ZhjH/`cpJY(1=u=`,ZAC7X#F(/`E1ds0O4$jN_V81O_45g#Mg')72E:]%YZ`_)+Uj^9hSUln`#f[*i1s?$%mV+:_0f#EWM9;hDnbXA'aKdMAo"dQ\6as^5=JP<&2\?fm9<aP4_HnQ-7\ka/n3$Zdg4OFP/_Ne>KIAZ\X;`bBPk[L'XF:[[UE\E-%3g.6WI#$d%Bh45%!f)I'Rt5bHU08>-WnDAmUOI[)@HEigStX)df&[=VFN%LC<@1m>dn#t\H2:%WfgR#4gth-&Gd!Qj';#t3W:=Mo%+JqW'6e,<;-AB>aq+\r,S&7Q$V'GU!5Y+@AefEq(-G1+q+p#TG1A@p5dO6oT1pZ$X(+E2V1nt%)fOqQ?a2ImJC\56u>?@\lB;0u5%r1Qms,/F>jlqE9;'XQ7?I=O0s@T*H$]fHKV&@G4_Ldoo4\01p2BSpX,bc6>eG/UgcGmi4l;:(-S9trM5hdG$e`#1D`Z(s@99t!Wb%\Lk60Ur>rCK&dT>-M(9,6mAM;rlqnZ/8N7A;f[Ah7O]]J]%g.pWD$3DL-e\]?mRLB2kR&;bXEQ!2N):.ND5DgdfPKoE+>2\TpT)j%Y-p*U>'<5LB(%,$-V\iMj!A_1I7tmkk&"Z]9!:al%Bsh?+#J_!Bn:e-Nhk&^4;DpSCTM*!>T%ugMb;$S4nc<-<n<I;%S6Fqb*Gbb%HEJHd_+%%#8l%bB6(A8W%;!;\mC<Q&30AaX315TX.eSuSY"+i"=g7KN@S*UA*_C(/%Y2+1i)&c-6@qX9;XD?aGcF$=Ck3%a@'Qel%L#M!XOZQXI_h,4hI2IU:`p$U0^siER4F1#'F_0``L2o5=X3AkATJ;Js#%!-X<f)&Rf.\ut,PFACm=UN<XU!gcl.GSMNeg9-`k`'Y%gh93A6AG^d-UlL'`@b_00_/V!@>3bgE@3E2l5pYmkehfoNCTJ(QioV>L!NUF/K"U(Dkr^FJt;_Mkjg_6qgibo78=;O83.D5<lSG\%g/R0.q<S\DGi,j.hC6sg`=e<h"c/nSi,b%$/uV4qB<6iXMktj'!lk^%ipKBbDh(.(0hcR+?*lP[#g%V<Y95d8"+pl*%u](.85[*Y%Z4^=KXd)urqjp9QTDu5_J;GcFg(62@?<-'E-a9AV>2D`4;]^aTqON;Ai`u=).ZR[/:#fU-oL$CKdW%nG$7)M710YE"1?n-J_afOo%.:onnbo+JLWP3M@O9s3s?/sg1)mg^j9P,tnRoLXHj-NB[#jqc"jH+9o!75G'j\,V\[RSB>o:GrdC+Ws00nYNgH6R9*)>W=C@:S>T%*$:P6ha/m/F9I%$H=BC";>:^lf[6h4Wk6F9V>INNP1?"1R'^\1-1obr.OC7_aBs(Def'eD9:$f*Kc\;"f.3KiY5H@dm)K$E8Xm20%@7!-X*e'r*UIJ>Y4>^s:p^XFrMoLaq'?Gi61i@t/h?Zmu)E3m7).Zg8`XR=/#/o`"EMH!5E^Jc_&>MZUA4bQAB^YP#&iVL!kgr2^%7M5Z[64\jkc'8ffY@Eh-cM9gJH`a%3h4OEPV_?Bjh]>S>2\.S9^JD?5hnSL6e'IV=[h$f_QX;tK:U`!,rV0SKk?HO!GB]\YpjDZD)fLH,~>%AI9_PrivateDataEnd